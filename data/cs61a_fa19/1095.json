{
    "subject": "[HW 04] Balanced",
    "content": "<p><a href=\"https://cs61a.org/hw/hw04/#q3\" target=\"_blank\" rel=\"noopener noreferrer\">Q3: Balanced</a><br /><br /></p>\n<p>Please post all questions you have below concerning Q3: Balanced in the follow-ups.<br /><br /></p>\n<p>If you are stuck on this question, feel free to read through the follow-up responses to see if you can draw any ideas from them.</p>\n<p></p>",
    "threads": [
        {
            "question": "Abstraction barrier aside, if I have a setup like this(which I believe is one of the setups in the test cases): ![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzlnq3z2td82xs%2Fk13y13cstt99%2FIMG_2304.HEIC)![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzlnq3z2td82xs%2Fk13y13cstt99%2FIMG_2304.HEIC)  ![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzlnq3z2td82xs%2Fk13y27r34rl9%2FIMG_2304.HEIC)![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzlnq3z2td82xs%2Fk13y3919u4lx%2FScreen_Shot_20190928_at_12.25.01_PM.png)  How is this system balanced? At the second node of the right ramification, whose arms are 5 and 1, the torque of the two nodes attached underneath are equal(2 * 3 and 3 * 2 respectively), but for the node itself, should it have a torque of 6 or 12(6+6)? Either case, it doesn't equal 5, which means the tree should be right unbalanced. Why is the answer True in the test case?",
            "follow-ups": [
                {
                    "feedback": "Torque is weight * length. The left one you're looking at has length 5 and weight 1. So its torque is 5 * 1 = 5. The right arm has length 1. The weight of the mobile dangling from the node at the end of that length-one arm is 3 + 2 (the weight of the two leaves). So the right arm has torque 1 * 5 = 5 as well."
                }
            ]
        },
        {
            "question": "Do we need to consider the input is the weight?",
            "follow-ups": [
                {
                    "feedback": "Sure: \"You may find it helpful to assume that weights themselves are balanced.\" Implying whenever you call `balanced` on a weight, it should return True."
                }
            ]
        },
        {
            "question": "Why is balanced(mobile(side(1,w),side(1,v))) False in the doctest? Aren’t the weights of w and v the same (both are weights of t and u)? And since the length of both sides are both 1, shouldn’t it return True?",
            "follow-ups": [
                {
                    "feedback": "One of the requirements for a balanced mobile is \"Each of the mobiles hanging at the end of its sides is balanced\", and w is not a balanced mobile"
                }
            ]
        },
        {
            "question": "do we need to define a new func for this prob?",
            "follow-ups": [
                {
                    "feedback": "No; consider using recursion"
                }
            ]
        },
        {
            "question": "Im having some trouble with this question. My recursive call checks whether length(left)*end(left)==length(right)*end(right). Not sure if this is the correct thinking. Also, stuck on the base cases",
            "follow-ups": [
                {
                    "feedback": "This is a good start!  Remember that the torque is the product of the weight and the length ( AKA length times width, or l * w). For a mobile to be balanced, it is required that the torque on both sides is equal, which is very close to what your check does. end() may give us a mobile, but we don't really want a mobile here. We instead want to get the total weight of the left and right side. Is there something that will help us find that?  As for the base cases, look at the hint. We know that weights themselves are balanced, so if we input a weight into balanced() what should we get back every time? Also note that calling end() will only give a weight if we've gone through everything in our original mobile. You could think of them like the leaves of trees since they don't have any sides attached to them."
                },
                {
                    "feedback": "Is this part of the base case or the recursive call? I am thinking of using this in the base case."
                },
                {
                    "feedback": "\"We instead want to get the total weight of the left and right side.\" This is the part I am talking about. Forgot to write in the above post. Thanks for your help! Also when we reach we get to the weight at the very end,how can I access the right weight of it? Or am I not thinking correctly"
                },
                {
                    "feedback": "Getting the total weight of the left and right side isn't really a base case since we don't stop recursing, but it's not really a recursive call either. You don't really need to call balanced() again to find the total weight of the left and right side, but you do need to call another function to do it. Is there any function like that in our code already?      Also to access the weight of a weight, you can just call the size() function. It's part of the weight data abstraction, so look through its comments to see what it does if you aren't too sure about it. A weight doesn't have any sides on it, so you can't really get the right side of it if that's what you meant by right weight. If you meant like the correct mass of the weight, then yeah, size() will do that for you."
                },
                {
                    "feedback": "oh ok. Thank you!"
                },
                {
                    "feedback": "For the recursion part, should we be storing the True/False values when checking if l*w(left)=l*w(right)? I dont see any other way of doing it. Stuck"
                },
                {
                    "feedback": "You could, but you don't have to. One cool use of recursion is to make it so we don't have to store the value, but instead pass results up the evaluation tree.  To figure out the recursion part, just look at the checklist we're given and don't overthink it. The first point asks us to check if the torques are the same which I've explained how to do. The second point asks us to check if the left and right mobiles are balanced as well. Is there a function that helps us check if a mobile is balanced? (Remember the recursive leap of faith for that one.)  If the first point **and** the second point are true, then we return True since that would imply the mobile is balanced, but if one is False, then we would return False."
                },
                {
                    "feedback": "Interesting! Thanks :)"
                }
            ]
        },
        {
            "question": "can we use the all function? if not, whats an alternative.",
            "follow-ups": [
                {
                    "feedback": "you are free to use the all funciton."
                }
            ]
        },
        {
            "question": "I have all the math worked out, but I am having trouble figuring out how to return True or False with recursion. Right now, my balanced function checks if the left and right torque are equal. If they aren't it returns false. Otherwise it checks if end(right(m)) and end(left(m)) are mobiles. If they are it uses them as arguments for balanced. However, if they clear all of my control statements, the function returns True. This doesn't work for mobiles that have mobiles as weights, because if the first mobile as a weight it checks is balanced, the function returns True without checking if the other mobiles as weights are balanced. How can I change this with numbers or otherwise so that the function checks all mobiles as weights before returning True or False?",
            "follow-ups": [
                {
                    "feedback": "I would implement a base case such that `balanced(m)` immediately returns `True` if `m` is a weight (This is hinted at in the problem description: \" _Hint:_ You may find it helpful to assume that weights themselves are balanced\"). This helps with making a leap of faith"
                }
            ]
        },
        {
            "question": "Are we allowed to use the toal_weight function in our balanced function?",
            "follow-ups": [
                {
                    "feedback": "Yes"
                }
            ]
        },
        {
            "question": "I keep getting this syntax error but I don’t find anywhere that’s wrong. I’m so confused.![](https://piazza.com/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzqdhg01so23yc%2Fajvkrgpdlmwo%2FIMG_6664.PNG)",
            "follow-ups": [
                {
                    "feedback": "It also says error importing file, but when I delete the code and check for my previously passed problems it works."
                },
                {
                    "feedback": "You have one more ( than )"
                },
                {
                    "feedback": "I fixed all the parentheses problem and checked again, but now it still has the same problem.![](https://piazza.com/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzqdhg01so23yc%2Fsedyiklxaxau%2FIMG_6665.PNG)"
                },
                {
                    "feedback": "You need to say `left(m)))` not `left(m))`"
                },
                {
                    "feedback": "I fixed it but I’m getting a syntax error hat pointing at mobile now, I’m so confused."
                },
                {
                    "feedback": "the error message that you receive is usually pretty descriptive of the issue - check for mismatched parentheses and that you are passing in the correct things (i.e. weights, sides, mobiles)."
                }
            ]
        },
        {
            "question": "When I use left(m) in my line of code to check the first condition: left length * left weight = right length * right weight, there aren't any problems.  But when I try to call balanced(the weight of the end of the left side of m), I get the error:                line 42, in left         assert is_mobile(m), \"must call left on a mobile\"     AssertionError: must call left on a mobile          # Error: expected     #     True     # but got     #     Traceback (most recent call last):     #       ...     #     AssertionError: must call left on a mobile  I am using left(m) the same way I did in the previous line of code, why does it only error when I call it a second time? and isn't m a mobile?",
            "follow-ups": [
                {
                    "feedback": "Maybe implement a base case so that when `balanced` gets called on a weight, it always returns True."
                }
            ]
        },
        {
            "question": "Sorry, this is a very general question, but what do you do when a line of code is longer than 80 characters? I found myself using more than 80 on this particular solution.",
            "follow-ups": [
                {
                    "feedback": "I suppose you can break up the logic into multiple lines of code. I think there is also a way to format your code so one line is on multiple lines but is more readable."
                },
                {
                    "feedback": "`python` lets you separate into a newline by using `\\`"
                }
            ]
        },
        {
            "question": "I'm confused on how to make my total_weight call in the elif statement that determines whether the torque of the left and right are equal. In total weight, it is asserted that the argument passed in must be a mobile, but I do not know how to convert the left side of m into a mobile. I tried end(left(m)) however this value is a weight. I tried using the mobile constructor, but I do not know what argument to pass in for 'right'. How do I construct a mobile that is just the left side of the parent mobile?",
            "follow-ups": [
                {
                    "feedback": "Actually end(left(m)) could be either a mobile or weight. See the diagram:  ![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fis6pa43ssrn1d9%2Fk1fn959wslca%2FScreen_Shot_20191006_at_4.54.59_PM.png)"
                },
                {
                    "feedback": "I think the total_weight function first checks whether the passed in `m` was a weight. If so, it will return the weight of `m` so I don't think you need to worry about the case in which the end is a weight"
                }
            ]
        },
        {
            "question": "Do we need to do the same sort of tree stuff like in lab? I'm not really sure how to even approach this problem.",
            "follow-ups": [
                {
                    "feedback": "Similar to the tree stuff in lab, yes. If you are completely lost, try talking it out with classmates/friends and coming to office hours. Piazza is not really the best place to explain things from scratch"
                }
            ]
        },
        {
            "question": "![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjr5jrbbbw5i3u6%2Fk1hjwn3suqy0%2FScreen_Shot_20191008_at_12.56.46_AM.png)  Does anyone know what is wrong here? and I mean what does it mean by unboundlocal error?",
            "follow-ups": [
                {
                    "feedback": "what is `identify` referring to?"
                }
            ]
        },
        {
            "question": "I keep failing this test case:                >>> balanced(mobile(side(1, v), side(1, w)))     True          # Error: expected     #     False     # but got     #     True       I have a base case checking if m is a weight and a recursive call that calls balanced on the left and right of m. Not sure if its my recursive call or maybe my if condition that's wrong?",
            "follow-ups": [
                {
                    "feedback": "are you also checking for condition 1 of balance? \"The torque applied by its left side is equal to that applied by its right side. Torque of the left side is the length of the left rod multiplied by the total weight hanging from that rod. Likewise for the right.\""
                },
                {
                    "feedback": "Yes I checked it, thats my recursive call if condition"
                },
                {
                    "feedback": "not sure then - by your description, the only thing that seems missing is the torque check. perhaps make sure that you are using the mobile methods correctly to get information from the mobile."
                },
                {
                    "feedback": "So for my recursive call i should call balanced twice right? Is it okay to connect them using ‘and’? If I use ‘+’ it returns a number"
                },
                {
                    "feedback": "yes"
                }
            ]
        },
        {
            "question": "To compute case 1:    1. The torque applied by its left side is equal to that applied by its right side. Torque of the left side is the length of the left rod multiplied by the total weight hanging from that rod. Likewise for the right.  I will need total_weight of left side * length of left side compared to right side. Problem is that I am unable to figure out how to use total_weight function. Following test code:                    print(\"left length\", length(left(m)))           print(\"right length\", length(right(m)))           print(\"left weight\", total_weight(left(m)))           print(\"right weight\", total_weight(right(m)))     Results in:                >>> t, u, v = examples()     >>> balanced(t)     left length 1     right length 2     Traceback (most recent call last):       File \"<stdin>\", line 1, in <module>       File \"hw04.py\", line 126, in balanced         print(\"left weight\", total_weight(left(m)))       File \"hw04.py\", line 105, in total_weight         assert is_mobile(m), \"must get total weight of a mobile or a weight\"     AssertionError: must get total weight of a mobile or a weight  I don't quite understand why total_weight does not work correctly.",
            "follow-ups": [
                {
                    "feedback": "Resolved: end() function must be used to \"Select the mobile or weight hanging at the end of a side.\""
                }
            ]
        },
        {
            "question": "![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzlnp2nig3a245%2Fk1k180ous9sn%2FScreen_Shot_20191009_at_6.36.57_PM.png)  can someone pls help me figure out why i am failing this test",
            "follow-ups": [
                {
                    "feedback": "nvm got it"
                }
            ]
        },
        {
            "question": "On all my functions in the homework, including total_weight which is in the skeleton code, I am receiving this error, but I am unsure how to fix it.![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzkuxmxphd5cy%2Fk1mjqmmcvd8r%2FScreen_Shot_20191011_at_12.48.44_PM.png)",
            "follow-ups": [
                {
                    "feedback": "This looks like an implementation of the `side` function from a previous semester. Please use this semester's version of the homework."
                }
            ]
        },
        {
            "question": "![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzkv017wndk6xr%2Fk1mxlvwf7ukx%2FScreen_Shot_20191011_at_7.18.33_PM.png)Can someone please help me with why I am possibly getting True instead of false? I basically followed the exact cases in the instructions: firs case im checking if the torques are equal then return true, then second case I'm checking if ends of the left side and right side of the mobile is balanced (recursive case) then return true, otherwise return false",
            "follow-ups": [
                {
                    "feedback": "Got it."
                }
            ]
        },
        {
            "question": "I am seeing if len(left(m)) * total_weight(end(left(m))) equals len(right(m)) * total_weight(end(right(m)))) for the if statement in my recursive case. I have a base case that I believe works. I keep getting False instead of True and I am not sure why. Any ideas? I am wondering if the logic of statement above is perhaps the problem...",
            "follow-ups": [
                {
                    "feedback": "The side length is accessed by the function `length`. len works in this case because of how the abstraction works, but it returns the wrong value."
                },
                {
                    "feedback": "Okay, thanks. After I fix that, I get this error:  Traceback (most recent call last):  # ...  # AssertionError: must call left on a mobile  Not sure why I get this. I am trying to multiply the length by the total weight, I don't see how 'mobile' or more specifically, the is_mobile function, relates to that."
                },
                {
                    "feedback": "you are using the left function with something that is not a mobile - check places where you are using left to make sure that this is not the case!"
                }
            ]
        }
    ]
}