{
    "subject": "[HW 07] Q2: Derive Sum",
    "content": "<a href=\"https://cs61a.org/hw/hw07//#q2\">Q2: Derive Sum</a>\n\n<p> Please post all questions you have below concerning Q2: Derive Sum in the follow-ups.\n\n</p><p> If you are stuck on this question, feel free to read through the follow-up responses to see if you can draw any ideas from them.\n</p>",
    "threads": [
        {
            "question": "How can you get the number in front of a variable? For example if the variable was 23x, how could you just get the 23?",
            "follow-ups": [
                {
                    "feedback": "Think of how 23x is constructed in our system - it is the product of 23 and x. Now, in our system, how do we get the first part of a product?"
                },
                {
                    "feedback": "How do I divide something like x by a variable? I'm trying to do x divided by x, is that how I'm supposed to be approaching this?"
                },
                {
                    "feedback": "No, instead of hard coding derivative rules, you should use a recursive leap of faith"
                }
            ]
        },
        {
            "question": "**Could you give some hints about the format of outputs of**  derive-sum > Suite 1 > Case 1   (cases remaining: 2)  scm> (load-all \".\")   scm> (make-sum 1 3)",
            "follow-ups": [
                {
                    "feedback": "Look at the hint and implementation below (this was in hw07.scm and also was included in the problem statement on the website)                ; Sums are represented as lists that start with +.     (define (make-sum a1 a2)       (cond ((=number? a1 0) a2)             ((=number? a2 0) a1)             ((and (number? a1) (number? a2)) (+ a1 a2))             (else (list '+ a1 a2))))"
                },
                {
                    "feedback": "Thanks"
                },
                {
                    "feedback": "derive-sum > Suite 1 > Case 1     (cases remaining: 2)          scm> (load-all \".\")     scm> (make-sum 1 3)     ? (+ 1 3)     -- Not quite. Try again! --  I can't seem to get this right. Yes, I've read through make-sum procedure.  I also don't understand what **=** sign before **number?** means."
                },
                {
                    "feedback": "It is an operator defined in the same file as the following:   ```   (define (=number? expr num)   (and (number? expr) (= expr num)))   ```   It just checks if `expr` is a number and then returns whether `expr` is equal to that `num`. Just treat it as checking whether two values are equal."
                }
            ]
        },
        {
            "question": "![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjkaea2a0ntf6ft%2Fk2jqgz1nk79h%2FScreen_Shot_20191103_at_5.15.31_PM.png)  why isnt this the answer but hints to what the answer is?",
            "follow-ups": [
                {
                    "feedback": "* but also can anyone give me hints"
                },
                {
                    "feedback": "Think what `(make-sum 'x 1)` evaluates to. Your answer implies that it evaluates to `x`"
                },
                {
                    "feedback": "according to the 2nd test case doesn't it evaluate to x? I though that when you call make-sum and one of the arguments is not a number it returns the one that is not a number"
                },
                {
                    "feedback": "Be careful, `(make-sum 'x 1)` will not evaluate to the same thing as `(make- sum 'x 0)` \\- one is meant to represent the sum of `x` and **1** , and the other is meant to represent the sum of `x` and 0."
                },
                {
                    "feedback": "OH thank you SM"
                }
            ]
        },
        {
            "question": "The description says \"use data abstraction for a sum\", should I just call make-sum somewhere? I'm a little bit confused.",
            "follow-ups": [
                {
                    "feedback": "Given our data abstraction for a sum (look at all the procedures available) try to see how you can extract the two elements (addend/augend) from `expr`"
                }
            ]
        },
        {
            "question": "Why would (derive '(+ x 3) 'x) return 1? Can somebody please explain a bit?",
            "follow-ups": [
                {
                    "feedback": "(derive '(+ x 3) 'x) translates to the following mathematically:  $$f(x) = x + 3$$  $$\\frac{df}{dx} = ?$$"
                }
            ]
        },
        {
            "question": "Should we consider derivatives of sums with more than 2 functions?",
            "follow-ups": [
                {
                    "feedback": "A single sum has two inputs, so as long as you properly derive the inputs it will work when sums are chained together"
                }
            ]
        },
        {
            "question": "How do we use a procedure to get the derivative of addend and augend before we sum them? And where do we find addend and augend? Are they what expr and var are?",
            "follow-ups": [
                {
                    "feedback": "The following procedures are all contained within hw07.scm and should be utilized in your solution:                ; Variables are represented as symbols     (define (variable? x) (symbol? x))     (define (same-variable? v1 v2)       (and (variable? v1) (variable? v2) (eq? v1 v2)))          ; Numbers are compared with =     (define (=number? expr num)       (and (number? expr) (= expr num)))          ; Sums are represented as lists that start with +.     (define (make-sum a1 a2)       (cond ((=number? a1 0) a2)             ((=number? a2 0) a1)             ((and (number? a1) (number? a2)) (+ a1 a2))             (else (list '+ a1 a2))))     (define (sum? x)       (and (list? x) (eq? (car x) '+)))     (define (addend s) (cadr s))     (define (augend s) (caddr s))              ; derive returns the derivative of EXPR with respect to VAR     (define (derive expr var)       (cond ((number? expr) 0)             ((variable? expr) (if (same-variable? expr var) 1 0))             ((sum? expr) (derive-sum expr var))             ((product? expr) (derive-product expr var))             ((exp? expr) (derive-exp expr var))             (else 'Error)))"
                },
                {
                    "feedback": "Following up on Cyrus, this is an ADT with Scheme functions, sort of like the `tree`, `label`, and `branches` functions we had in Python back in Lecture 12. Now you’ve just got to do the same thing, but in Python."
                }
            ]
        },
        {
            "question": "what do you use as var when you call derive-sum? Don't you need to know the name of the variable for that?",
            "follow-ups": [
                {
                    "feedback": "Where are you calling `derive-sum`?"
                },
                {
                    "feedback": "sorry i meant derive. I'm calling derive in derive-sum but derive takes in both an expression and a variable, what do I put for the variable?"
                },
                {
                    "feedback": "Remember that you have access to the variable that `derive-sum` takes in as a parameter"
                },
                {
                    "feedback": "got it, thanks"
                }
            ]
        },
        {
            "question": "scm> (make-sum 'x 0)  (+ x 0)  Why isn't this the answer, since x is not a number? Shouldn't it just make a list of a plus and the two arguments?"
        },
        {
            "question": "![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzqdjbhgcj5er%2Fk2pkuoolxj83%2Fwrrrorororor.PNG)  What is this???? Why do I keep getting this output? I literally filled in the derive sum part with code....",
            "follow-ups": [
                {
                    "feedback": "Double check that you saved the file?"
                },
                {
                    "feedback": "I did!!! Still nothing! I tried debugging by changing the things inside my code. It seems like it is something with addend and augend. IM not sure though. I made a private post."
                },
                {
                    "feedback": "I'm having the same issue. I re-downloaded the autograder twice and still no luck. Has this been resolved?"
                }
            ]
        },
        {
            "question": "For some reason, it says that make-sum does not exist. Are we supposed to edit the code given because I left it as is and this came up.  ![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjqwzrd6psbo5i1%2Fk2po4mj0i7uq%2FScreen_Shot_20191107_at_8.53.16_PM.png)",
            "follow-ups": [
                {
                    "feedback": "It should already be defined for you. Here’s the full AST definition if you lost it.   ```   ; Derivative      (define (cadr s) (car (cdr s)))   (define (caddr s) (car (cdr (cdr s))))      ; derive returns the derivative of EXPR with respect to VAR   (define (derive expr var)   (cond ((number? expr) 0)   ((variable? expr) (if (same-variable? expr var) 1 0))   ((sum? expr) (derive-sum expr var))   ((product? expr) (derive-product expr var))   ((exp? expr) (derive-exp expr var))   (else 'Error)))      ; Variables are represented as symbols   (define (variable? x) (symbol? x))   (define (same-variable? v1 v2)   (and (variable? v1) (variable? v2) (eq? v1 v2)))      ; Numbers are compared with =   (define (=number? expr num)   (and (number? expr) (= expr num)))      ; Sums are represented as lists that start with +.   (define (make-sum a1 a2)   (cond ((=number? a1 0) a2)   ((=number? a2 0) a1)   ((and (number? a1) (number? a2)) (+ a1 a2))   (else (list '+ a1 a2))))   (define (sum? x)   (and (list? x) (eq? (car x) '+)))   (define (addend s) (cadr s))   (define (augend s) (caddr s))      ; Products are represented as lists that start with *.   (define (make-product m1 m2)   (cond ((or (=number? m1 0) (=number? m2 0)) 0)   ((=number? m1 1) m2)   ((=number? m2 1) m1)   ((and (number? m1) (number? m2)) (* m1 m2))   (else (list '* m1 m2))))   (define (product? x)   (and (list? x) (eq? (car x) '*)))   (define (multiplier p) (cadr p))   (define (multiplicand p) (caddr p))   ```"
                }
            ]
        }
    ]
}