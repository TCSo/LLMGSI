{
    "subject": "[Hog] Problem 5b",
    "content": "<a href=\"https://cs61a.org/proj/hog//#problem-5b-1-pt\">Problem 5b</a>\n\n<p> Please post all questions you have below concerning Problem 5b in the follow-ups.\n\n</p><p> If you are stuck on this question, feel free to read through the follow-up responses to see if you can draw any ideas from them.</p>",
    "threads": [
        {
            "question": "s0, s1 = hog.play(lambda score, other: (score + 3) // 4 * 2 + 3, lambda score, other: 4 - other // 4 * 2, score0=0, score1=0, goal=10, dice=always_one)  Why doesn't score 0 output 11?  numrolls for 0 for the first turn are 3 and score is therefore 3.  The next turn for 0 ,numrolls is 5 , so player 0 gets 3 bonus points = 3+5+3=11  can someone please explain where I am going wrong?  Thankyou",
            "follow-ups": [
                {
                    "feedback": "Pig Out rule makes score become 1 on each turn because the dice outcome is always 1."
                },
                {
                    "feedback": "Hi, I'm still a little stuck on this problem. Here's what I have:  For the first turn, lambda is 3 and score0 is one because of PigOut.  For the 2nd turn, score1 is also 1.  For the 3rd turn, score0 is 5 because of feral hogs.  For the 4th turn, score1 is 2  For the 5th turn, score0 is 9  For the 6th turn, score1 is 3  For the 7th turn, score0 is 13.  Can someone clarify my error? Thank you so much!"
                },
                {
                    "feedback": "For the 4th turn, the feral hogs rule also applies. (Going from 4 rolls to 2 rolls)"
                },
                {
                    "feedback": "For the 4th turn, score1 will be 5 because feral hogs will apply.  For the 5th turn score 0 is 9.  For the 6th turn player 1 will roll 0 dice, meaning that free bacon will apply. The min of (0, 9) is 0, meaning that score 1 will increase by 10 points. However, feral hogs also applies(from 2 dice to 0 dice), so score1 will end up with 18 points."
                },
                {
                    "feedback": "s0, s1 = hog.play(lambda score, other: (score + 3) // 4 * 2 + 3, lambda score, other: 4 - other // 4 * 2, score0=0, score1=0, goal=10, dice=always_one)  What are the inputs lambdha score and other?  Is lamdha score the number of die rolled?   And is the first other the score of s0?"
                },
                {
                    "feedback": "The inputs, score and other, represent the current player's and opponent's score during each turn. For the first turn when Player 0 is rolling, score represents their current score and other represents their opponents current score. The lambda functions are each player's \"strategy\", so they return an integer (representing the number of dice rolled)."
                },
                {
                    "feedback": "Thank you. The first lamdha represents the number of dice rolled for player 0. What does other represent? Also, to calculate the first score of player0, how would I do that?"
                },
                {
                    "feedback": "The other lambda represents the strategy for Player 1, which returns the amount of dice Player 1 rolls that turn. The first score of Player 0 is \"score0\", the third parameter of the play function, so you don't need to calculate it."
                },
                {
                    "feedback": "So, how would I calculate the second score for player 0?"
                },
                {
                    "feedback": "Find out what dice is being used, and multiply the amount of rolls with the outcome of each roll. Add this to your previous score."
                },
                {
                    "feedback": "I have the same issue. Based on my calculation, this is what I got, and it contradicts what Tylor said regarding getting a 0 Num_rolls for player 1:  **round 1:**  Player 0: Num_rolls 3, score 1  Player 1: Num_rolls 4, score 1  **round 2:**  Player 0: Num_rolls 5, score 5  Player 1: Num_rolls 4, score 2  **round 3:**  Player 0: Num_rolls 7, score 9  Player 1: Num_rolls 2, score 6  **round 4:**  Player 0: Num_rolls 7, score 10  Player 1: Num_rolls 2, score 7"
                },
                {
                    "feedback": "I am very confused because I don't understand what the answer is. If we just do the first turn you roll 3 but the always 1 makes the score 1. Shouldn't 1 be the right answer for s0? This is only simulating one turn right?player 0?"
                },
                {
                    "feedback": "No. It simulates the whole game until one person reaches the goal"
                },
                {
                    "feedback": "I'm confused of how numrolls = 3. According to how lambda is defined: score, other: (score + 3) // 4 * 2 + 3.  s0 = 0, s1= 0  => (0+3) // (4 * 2 + 4) = 3 // (8 + 4) = 3 // 12 = 0.  Someone please clarify."
                },
                {
                    "feedback": "Since the dice is always one, shouldn't we always just be pigging out unless free bacon/ feral hog rules apply?"
                },
                {
                    "feedback": "Why isn't pig out always applied?"
                },
                {
                    "feedback": "Does swine swap apply to this problem?"
                },
                {
                    "feedback": "Sorry to jump backwards, but how do I find out what lambda is for each turn? (5b Suite 1 Case 1)"
                },
                {
                    "feedback": "I'm trying to answer at least the most recent anons' questions - please post a new follow up if you have a question that is still unanswered:  \\- the two strategies (lambdas) will be the first two arguments passed into the play function. sometimes this may be something like \"always(4)\", in which case you can think of it as a lambda that will always return 4 when called with arguments.  \\- all rules, including swine swap, apply to this problem.  \\- pig out only applies when a 1 is rolled on a turn (see rules).  \\- remember order of operations rules when evaluating the strategy functions."
                }
            ]
        },
        {
            "question": "I ran into an issue with s0, s1 = hog.play(always(2), always(1), score0=45, score1=5, goal=50, dice=hog.make_test_dice(5, 2)).  I was wondering why score 0 wouldn't output 52 (45 + (5+2)). Can someone explain why it s0 evaluates to 5?",
            "follow-ups": [
                {
                    "feedback": "According to Feral Hogs rule, we treat the turn before the first turn as rolling 0 dice. Thus rolling 2 dice in the first turn leads to a bonus of 3."
                },
                {
                    "feedback": "So we first check feral hog and then the swap rule?"
                },
                {
                    "feedback": "Yes"
                }
            ]
        },
        {
            "question": "Are we allowed to modify problem 5 in order to get feral_hogs to work?",
            "follow-ups": [
                {
                    "feedback": "They are two parts of a whole (5a/5b) also I don’t have the exact quote from the site but yes."
                }
            ]
        },
        {
            "question": "if feral_hogs== true, then does that mean that we have to check whether the difference in the number of rools is 2 and then decide to add/not add points, or does it mean that the difference is 2 and we have to add 3 points to the score?",
            "follow-ups": [
                {
                    "feedback": "Add 3 points to a players score if the number of rolls is 2 away from their previous number of rolls."
                },
                {
                    "feedback": "Thankyou  I am still a little confused though- do we have to write code to check whether the difference is 2, or that condition is accounted for if feral_hogs is true?"
                },
                {
                    "feedback": "You have to check the difference yourself - feral_hogs is True if the feral hogs rule is being used in reference to the entire game. If feral_hogs is False, then no additional behavior should happen."
                },
                {
                    "feedback": "how do we access the number of rolls on a previous roll?"
                },
                {
                    "feedback": "You could keep track of the number of rolls on a previous turn using a variable. After each turn, you update the variable with the new number of rolls."
                },
                {
                    "feedback": "I did that, and I was able to pass the first 3 cases but not the fuzz case. I got the error ID: 3916842897. The error is on the first turn where player 0 rolls 0 dice. It seemed like I'd be able to fix it easily because it was an error in the first turn and not a turn in the middle of the game, but everything i tried either didn't work or resulted in me only passing like the first case. Any ideas why this error could've come up?"
                },
                {
                    "feedback": "I'm not sure if that's a problem with your feral hogs condition. You're failing a case where player 0 on their first turn rolls 0 dice. Feral hogs does not apply in this case because 0-0 != 2. Try using a python interactive environment to debug this issue. Try to trace your function's execution."
                },
                {
                    "feedback": "yeah i figured it out, basically for strategy1, i forgot to swap score0 and score1 so that probably caused something to happen to the free_bacon"
                }
            ]
        },
        {
            "question": "Can we mix the code for 5(a) and 5(b) together instead of sepearting them as two clusters?",
            "follow-ups": [
                {
                    "feedback": "Yes, in fact the [composition guide](https://cs61a.org//articles/composition.html#double-spacing) states there shouldn't be any blank lines between lines of code within the body of a function."
                },
                {
                    "feedback": "I believe the question is referring to the comments which instruct us to type the answer to question 5b after the answer to question 5a. Can we integrate our 5b code into the 5a code rather than writing the answer in the designated section?"
                },
                {
                    "feedback": "I don't believe that there is a comment asking you to type the answer to 5b after 5a. Instead, there is only one set of comments within which you are supposed to write the code for all of question 5, parts a and b. So, yes, you can integrate your 5b code into the 5a code."
                }
            ]
        },
        {
            "question": "Is:                lambda score, other: (score + 3) // 4 * 2 + 3, lambda score, other: 4 - other // 4 * 2  outputting numbers correctly? Mine doesn't seem to be properly returning numbers.",
            "follow-ups": [
                {
                    "feedback": "That one line contains two separate lambdas, as hog.play requires two strategies to be passed into it - are you trying to test these lambdas separate from the hog.play call?"
                }
            ]
        },
        {
            "question": "As a bit of feedback, I think 5b needs more tests - all 108 tests of the project passed despite me never checking for the value of feral_hogs, which was a major mistake",
            "follow-ups": [
                {
                    "feedback": "This was a problem for me as well. I was able to pass all the tests without ever utilizing the feral_hogs parameter."
                }
            ]
        },
        {
            "question": "Are we allowed to make new functions in the hog project? Like putting some tests in a separate function for abstraction .  Thank You!!",
            "follow-ups": [
                {
                    "feedback": "you are free to implement helper methods and additional functions to test, as long as the headers of the original functions provided with the skeleton files remain as they are. another possibility for testing is to include more tests in the doctests at the top of the functions in question."
                }
            ]
        },
        {
            "question": "I tried to activate the GUI for the game but my computer just crashes haha. I don't know if this something I can fix?",
            "follow-ups": [
                {
                    "feedback": "Ok rather - how do you install Tkinter?"
                },
                {
                    "feedback": "<https://tkdocs.com/tutorial/install.html>"
                },
                {
                    "feedback": "Weird. I reinstalled Python and it just started working."
                },
                {
                    "feedback": "I'm having the same problem"
                },
                {
                    "feedback": "I reinstalled Python as well, but my computer still crashes when I try to activate the GUI"
                },
                {
                    "feedback": "If y'all are using the most recent macOS and also have anaconda installed @296"
                },
                {
                    "feedback": "resolving old Hog follow ups - please post a new public / private post if you have lingering questions about parts of the project!"
                }
            ]
        },
        {
            "question": "When attempting to submit phase 1 of Hog, I get the following message:  Test summary  Locked: 1  57 test cases passed! No cases failed.  Is there any way to fix this and unlock the remaining tests? I have already tried re-unlocking every test to see if that fixed anything.",
            "follow-ups": [
                {
                    "feedback": "The locked test cases I'm pretty sure are for parts B & C but I could be wrong. (mine also shows the same)"
                },
                {
                    "feedback": "I just submitted phase 1 and I got  Locked: 1  58 test cases passed! NO cases failed.  as well. Not sure if we missed something."
                },
                {
                    "feedback": "If you run                python3 ok -u  you should notice that the remaining question is for the next phase (at least that's how it is for me). I think you shouldn't be missing anything, but double check <https://okpy.org/> to make sure your submission is there and current."
                },
                {
                    "feedback": "I also got Locked:1"
                },
                {
                    "feedback": "if your first unlocked test when you run `python3 ok -u` is after 5b, then you are good 2 go."
                }
            ]
        },
        {
            "question": "![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fiy2fd0pd6dd1qf%2Fk064judfrqtx%2FScreen_Shot_20190904_at_8.13.31_PM.png)  For line 1, would the opponent score be the sum of the three dice (4, 2, 6) that are rolled inserted into the equation to get s0?  <line1> -2 12",
            "follow-ups": [
                {
                    "feedback": "I believe this is q6 not 5b.  But to answer your question, note that scores start as 0 if otherwise specified."
                }
            ]
        },
        {
            "question": "how do we figure out what the number of rolls was of the PREVIOUS roll?",
            "follow-ups": [
                {
                    "feedback": "You can keep track of this with variables you create"
                }
            ]
        },
        {
            "question": "error_id: 129711554  For the last test for Problem 5b, the fuzz test, is there some way we can find how the game is playing? What parameters it is using? I have an error at turn 1 but I can't seem to debug the problem without knowing what the parameter input should output",
            "follow-ups": [
                {
                    "feedback": "@352"
                }
            ]
        },
        {
            "question": "error_id: 2742982547  Passed the first 3 test cases, but I'm having issues on Turn 2 of my second game:                Incorrect implementation of game at turn 2.  I am unsure how to debug this considering the outcome of each die roll is not shown.",
            "follow-ups": [
                {
                    "feedback": "@352"
                },
                {
                    "feedback": "No worries, figured out the issue."
                },
                {
                    "feedback": "Did you know where is issue? I have the same problem with you."
                }
            ]
        },
        {
            "question": "Incorrect implementation at turn 5  error id: 1675448816  Incorrect result after playing 1 game(s):  \\----------------------------------------------------------------  score0 score1 Turn Summary  \\----------------------------------------------------------------  Turn 0: 0 0 Player 0 rolls 0 dice:  +10  0 10  \\----------------------------------------------------------------  Turn 1: 0 10 Player 1 rolls 4 six-sided dice:  +16  0 26  \\----------------------------------------------------------------  Turn 2: 0 26 Player 0 rolls 2 six-sided dice:  +10  10 26  \\----------------------------------------------------------------  Turn 3: 10 26 Player 1 rolls 10 six-sided dice:  +1  10 27  \\----------------------------------------------------------------  Turn 4: 10 27 Player 0 rolls 9 six-sided dice:  +1  11 27  \\----------------------------------------------------------------  Turn 5: 11 27 Player 1 rolls 6 six-sided dice:  +28  11 55  \\----------------------------------------------------------------  Turn 6: 11 55 Player 0 rolls 2 six-sided dice:  +9  20 55  \\----------------------------------------------------------------  Turn 7: 20 55 Player 1 rolls 8 six-sided dice:  +4  20 59  \\----------------------------------------------------------------  Turn 8: 20 59 Player 0 rolls 1 six-sided die:  +3  23 59  \\----------------------------------------------------------------  Turn 9: 23 59 Player 1 rolls 8 six-sided dice:  +1  23 60  \\----------------------------------------------------------------  Turn 10: 23 60 Player 0 rolls 6 six-sided dice:  &n",
            "follow-ups": [
                {
                    "feedback": "It appears your free bacon function is updating the wrong players score (Turn 1, shouldn't score0 gain 10, not score1?)"
                },
                {
                    "feedback": "That's what I thought as well, but I believe the scores swap after free bacon due to 0*0 = 1*0, so I'm unsure where exactly my function broke."
                },
                {
                    "feedback": "Check the logic in your conditionals, and make sure that your rules are executing in the right order."
                },
                {
                    "feedback": "I have the same error id as OP. While debugging, I added print statements in my roll_dice and take_turn functions in order to see what each dice roll was (the code block below). I don't see what's wrong with turn5. If player1 5, 6, 6, 3, 4, and 4 are rolled, player1 should gain 28 points: Pig Out doesn't happen because no \"1\"s were rolled, Free Bacon doesn't happen because player1 rolled more than 0 dice, Feral Hogs doesn't trigger because he rolled 10 dice the previous turn, and and Swine Swap doesn't trigger because 5*5 != 1*1.                Left of the \")\" are the turn numbers; right of it are the dice rolls in order (until a \"1\" is rolled)              00)           01) 3 4 6 3          02) 3 4          03) 6 2 6 3 1          04) 4 6 4 1          05) 5 6 6 3 4 4          06) 6 3          07) 6 1          08) 3          09) 5 1           10) 4 2 2 3 6 6          11) 5 4 5 3 2 5 1             12) 6 5 5 5 1          13) 1          14) 4          15) 6 5          16) 1          17)           18) 6 1          19) 6 2 2 1          20)           21)             22) 3 2          23) 4 6"
                },
                {
                    "feedback": "Okay I figured out the problem. I didn't read this line from Problem1:  \"Remember to call `dice()` exactly `num_rolls` times even if Pig Out happens in the middle of rolling. In this way, you correctly simulate rolling all the dice together.\""
                }
            ]
        },
        {
            "question": "why should s0 in this test come out to 9?  s0, s1 = hog.play(lambda score, other: (score + 3) // 4 * 2 + 3, lambda score, other: 4 - other // 4 * 2, score0=0, score1=0, goal=10, dice=always_one)  in the first turn,  s0 = 0 s1 = 0  according to strategy0, player 0 rolls (0 + 3) // 4 * 2 + 3, which equals 3 dice. therefore, as the dice always rolls one, 3 is added to his score.  s0 = 3 s1 = 0  player 1 then rolls 4 - 3 // 4 *2, which equals 4 dice. 4 is added to his score.  s0 = 3 s1 = 4  player 0 rolls (4+3) // 4 * 2 + 3, which equals 5 dice. 5 is added to his score, along with 3 extra points because of feral hogs.  s0 = 11 s1 = 4  Shouldn't s0 be 11, since the goal score is 10? I don't understand why s0 is supposed to be 9.",
            "follow-ups": [
                {
                    "feedback": "Because of Pig Out, the players will score 1 on their turns instead of num_rolls * 1"
                }
            ]
        },
        {
            "question": "I passed all tests for 5b except the fuzz test where I have an error on the first turn so it should be an easy fix, however I decided to go through all my other tests to make sure everything else was working and when i got to problem 1, it said i passed 4 tests before encountering my first failed test. This doesn't make sense because I had passed 01 with that same code a couple days ago, now all of a sudden its not working. Anyone know why this could be?",
            "follow-ups": [
                {
                    "feedback": "Are you sure that you didn't change anything in your roll_dice() function? If so, try manually running the test case using python -i hog.py and tracing the program's logic to figure out why it's failing."
                },
                {
                    "feedback": "figured it out, thanks"
                }
            ]
        },
        {
            "question": "Question 5b > Suite 1 > Case 1  >>> import hog  >>> always_one = hog.make_test_dice(1)  >>> always_two = hog.make_test_dice(2)  >>> always_three = hog.make_test_dice(3)  >>> always = hog.always_roll  >>> # example 1  >>> s0, s1 = hog.play(lambda score, other: (score + 3) // 4 * 2 + 3, lambda score, other: 4 - other // 4 * 2, score0=0, score1=0, goal=10, dice=always_one)  >>> s0  5  **# Error: expected**  **# 9**  **# but got**  **# 5**  Run only this test case with \"python3 ok -q 05b --suite 1 --case 1\"  **Any advice? Thanks**",
            "follow-ups": [
                {
                    "feedback": "Make sure that you're accounting for the feral_hogs condition which would give a bonus 3 points to a player if their num_rolls is 2 away from their num_rolls from the previous turn. I recommend writing out the scores and the num_rolls for each turn and each player. When you do this, you'll find that feral_hogs condition is met on almost every turn for both players."
                },
                {
                    "feedback": "ok, also we must include feral_hogs==True right?"
                },
                {
                    "feedback": "By default, feral_hogs is True. In other words, if you don't explicitly pass in an argument to feral_hogs, it will just be bound to the default value True, which is what happens in this test case."
                }
            ]
        },
        {
            "question": "So on the first ok unlocker, player 0 wins on the first round because free bacon determines that they would get 10-min(0, 1) which would mean they got 10 points and the game is over. I'm just lost because I then unlocked the question by accidentally typing 9 and I'm not sure what happened. Any help?"
        },
        {
            "question": "Hey guys so how would I create a working algorithm for keeping track of the number of dice in the previous roll? I've tried many things and none of them have worked.",
            "follow-ups": [
                {
                    "feedback": "I'm having a lot of trouble with this too. I first initialized two variables to 0, one for each player's previous number of rolls outside of a while loop. Also for each player, I assigned the current number of rolls to a variable, tested the condition for feral_hog, and then reassigned the \"previous\" variable to the value of the \"current\" variable. Still not passing all test cases tho..."
                },
                {
                    "feedback": "I created two variables to hold the last number of rolled dice for each player, and then after strategy0 (or strategy1) generates how many dice should be rolled, I compare the two values to see if feral_hogs applies."
                }
            ]
        },
        {
            "question": "The question wants me to include the feral_hogs function, but I don't know where to start. I don't know its specific parameters, and my guess is to include the function after each player finish a turn unless that is incorrect to place that function right after the player finish a turn. Where do I go about that?",
            "follow-ups": [
                {
                    "feedback": "Feral hogs should be checked as a players turn is ending, but before your program determines if Swine Swap should occur. The rules for Feral hogs are defined in the Rules section of the hog project. Essentially if a player rolls 2 more or less dice than their last turn, they gain 3 bonus points (in addition to whatever they scored). If a player rolls 2 dice on their first turn, this rule should occur as they technically rolled 0 dice on their last turn."
                },
                {
                    "feedback": "Is it 2 or less dice than their last turn or just 2? I think its exactly 2"
                }
            ]
        },
        {
            "question": "Question 5b > Suite 1 > Case 2  (cases remaining: 3)  >>> import hog  >>> always_one = hog.make_test_dice(1)  >>> always_two = hog.make_test_dice(2)  >>> always_three = hog.make_test_dice(3)  >>> always = hog.always_roll  >>> # example 2  >>> s0, s1 = hog.play(always(2), always(1), score0=0, score1=0, goal=5, dice=hog.make_test_dice(2, 2))  >>> s0  why 7 is expected for s0?  what I thought:  0 0  4 2  8(>5)  so s0 is 8.  Any advice? Thank you!",
            "follow-ups": [
                {
                    "feedback": "In his first turn, player 0 rolled two dice which means 3 extra points added to the score since in turn 0 there were 2 rolls."
                }
            ]
        },
        {
            "question": "![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzqdi52fmpc4c0%2Fk07keux4x1md%2FScreen_Shot_20190905_at_8.33.29_PM.png)  Is my issue at turn 0 for sure an incorrect implementation of swine swap in play()? Or could it be something else. Any help is seriously appreciated.",
            "follow-ups": [
                {
                    "feedback": "Also, I see that I the players are receiving negative values in some turns. Any ideas?"
                },
                {
                    "feedback": "I can say for a fact your implementation of the swine swap is incorrect in turn 0. As 1*0 = 0*0"
                },
                {
                    "feedback": "Would you also happen to know what could cause the negative scores?"
                },
                {
                    "feedback": "I don't see any negative scores, those are the differences between the score before and after the turn."
                },
                {
                    "feedback": "Hi, I just wanna ask how can I run this testing mode for each turn in my terminal? Thank you so much!"
                }
            ]
        },
        {
            "question": "I was able to pass 5a all of the test cases and the unlocking test cases for 5b, but I am confused as to how to add feral_hog and free_bacon to the existing code which I have. Im just wondering where a good place would be to start and if there are any tips that would make this easy. Im not too sure in which direction to go",
            "follow-ups": [
                {
                    "feedback": "Firstly, free_bacon should already have been implemented in your take_turn function from Problem 3. Thus, if you are calling take_turn in the play() function you shouldn't have to worry about free_bacon.  With regards to feral_hog, you need to first find a way to keep track of the num_rolls for each player from their previous turn. I recommend doing this using variables. You also need an if condition that asks whether num_rolls from the current turn is 2 away from num_rolls from the previous turn. This if condition should be invoked each time either player takes a turn. Hope that helps."
                },
                {
                    "feedback": "Try to make a mental model of the order in which the points are added to the total score. Some of the rules need to be applied before the others, but they all go after the strategy has been calculated and the turn has been taken. For instance, Free Bacon can happen _after_ the take_turn( _args_ ) has been called because, since you're rolling a 0, no actual points are added to the total as a result of take_turn( _args)._ However, points are added after, so you'd have to store the strategy first, run some tests to see if Free Bacon applies (in this case its if the player rolls 0 dice), and if the tests confirm it, apply the points according to the rule."
                },
                {
                    "feedback": "but can't free_bacon happen before take_turn in the case that strategy gives us 0 roles?"
                },
                {
                    "feedback": "Yes it can. It seems like my code might reflect some redundancies and I'm not giving you the most concise answer with regards to this. Let me recollect and try to get back to you."
                },
                {
                    "feedback": "I ended up getting it. Thank you so much for both of your helps! Really appreciate it, it definitely made things a lot easier to understand!"
                },
                {
                    "feedback": "how do i differentiate between current num_rolls and previous num_rolls?"
                },
                {
                    "feedback": "you can try having separate variable names for them?"
                }
            ]
        },
        {
            "question": "How do we obtain the number the player rolled? When I call dice(), it seems to mess up the function.",
            "follow-ups": [
                {
                    "feedback": "Depends within which function you're trying to call it. There are a few layers of abstraction occurring and within some functions its fine, and within others it'll break the game."
                },
                {
                    "feedback": "I'm trying to do so in my play function. If I pass in dice() to a variable or function, it breaks the game."
                },
                {
                    "feedback": "Within the play function, you'll break the game. This is because there are a few layers of abstraction that you've bypassed. Dice is a very primitive function that doesn't handle many of the rules (for instance, the Pig Out rule should have been handled in roll_dice( _args_ ) and Free Bacon should have been handled in take_turn( _args)_. Because the test cases expect all of these rules and abstractions to be accounted for, calling dice() directly will fail the first case that expects Pig Out and Free Bacon to be accounted for."
                },
                {
                    "feedback": "Where are we supposed to call it then? Play is the only function with the feral_hogs parameter, so I'm having trouble figuring out where else to call dice()."
                },
                {
                    "feedback": "I believe dice gets called within roll_dice(), where the Pig Out rule is being accounted for. That function returns the result of addition of multiple dice being rolled. Then, in take_turn(), the Free Bacon rule is accounted for. That returns the results of roll_dice() unless Free Bacon occurs, in which case take_turn() returns the result of that particular rule. Then, within the play() function, you call the take_turn() function when you want to retrieve the score of the rolling of the dice. The take_turn() function will also return the right score if Free Bacon and/or Pig Out apply without having to account for it in play(). Feral hogs must be accounted for from within play() because, for each turn, you have to store the latest roll in some form of storage so that the next turn can use it when Feral Hogs applies. Make sure that you store the roll history for player0 and player1 separately. I might suggest an array and using the append() function to add a new roll to the end of the array. For instance,                someArray = [] # initialize the array, its empty     someArray.append(4) # now the array is storing the number 4     print(someArray[0]) # prints the first member of the array, which is 4. The output should be: 4"
                },
                {
                    "feedback": "take_turn returns the score, not the roll though. We do not need the score for purposes of feral_hog, only the roll, which is what is confusing me."
                },
                {
                    "feedback": "Yes. So what you could do is call the strategy0 (and strategy1 for the second turn) to retrieve the roll within play, store that roll (also within play), and then test for Feral Hog using the storage method that you chose to use. This must happen once per turn."
                },
                {
                    "feedback": "Okay, I tried your approach. Here is my code:      play:                   [ code removed ]  However, when I run the test, I get the following:                        Question 5b > Suite 1 > Case 1          >>> import hog     >>> always_one = hog.make_test_dice(1)     >>> always_two = hog.make_test_dice(2)     >>> always_three = hog.make_test_dice(3)     >>> always = hog.always_roll     >>> # example 1     >>> s0, s1 = hog.play(lambda score, other: (score + 3) // 4 * 2 + 3, lambda score, other: 4 - other // 4 * 2, score0=0, score1=0, goal=10, dice=always_one)     >>> s0     8          # Error: expected     #     9     # but got     #     8     Any idea why this is going wrong?"
                },
                {
                    "feedback": "Please don't post your code publicly. (Its against the rules btw) do it in a private post for the staff."
                },
                {
                    "feedback": "Oh, sorry about that. Will do."
                },
                {
                    "feedback": "Are you also getting error at turn 6 when you run python3 ok -q 05b --suite 2?"
                },
                {
                    "feedback": "I get an error at turn 2"
                },
                {
                    "feedback": "I'm in the exact same situation as you. What do you think it could be?"
                },
                {
                    "feedback": "I have removed the code posted earlier in this follow up - you are **not allowed to post code in a public manner**."
                },
                {
                    "feedback": "Same situation!"
                },
                {
                    "feedback": "the array approach suggested above is more complicated than necessary - you just need to keep the previous num_rolls for each player. I would suggest making sure that you are initializing correctly, and still taking turns as normal, even when the feral_hog rule is not applicable."
                },
                {
                    "feedback": "I used 2 variables to track each player's previous num_rolls, and I have the same problem with you"
                }
            ]
        },
        {
            "question": "When I try to implement the feral_hogs function, I end up with this error:  TypeError: 'bool' object is not callable  Where do I find out that somewhere in my code has an error?",
            "follow-ups": [
                {
                    "feedback": "I was in the same situation as you! But I found that feral_hogs has been defined as an argument in play() function. You could change the function name like 'feral' or something. This may help."
                }
            ]
        },
        {
            "question": "",
            "follow-ups": [
                {
                    "feedback": ""
                }
            ]
        },
        {
            "question": "**Question 5b > Suite 1 > Case 1**  >>> import hog  >>> always_one = hog.make_test_dice(1)  >>> always_two = hog.make_test_dice(2)  >>> always_three = hog.make_test_dice(3)  >>> always = hog.always_roll  >>> # example 1  >>> s0, s1 = hog.play(lambda score, other: (score + 3) // 4 * 2 + 3, lambda score, other: 4 - other // 4 * 2, score0=0, score1=0, goal=10, dice=always_one)  >>> s0  7  **# Error: expected**  **# 9**  **# but got**  **# 7**  I tested interactively and found **s1** is **10** (it should be 18).  Anyone having the same problem?  Or any advice on this? Thanks!!",
            "follow-ups": [
                {
                    "feedback": "figured it"
                },
                {
                    "feedback": "I had a similar problem, where I kept getting 5 instead of 9. make sure 1) the swap is last. 2) your previous score is being updated correctly."
                },
                {
                    "feedback": "got it. thank u!"
                },
                {
                    "feedback": "I am having exactly same problem. I tested interactively and found **s1** is **10.**  Could you please explain how you fixed the problem?"
                },
                {
                    "feedback": "Never mind, I just figured it out!"
                },
                {
                    "feedback": "**My s0 is 10**...Did anyone encounter the same situation as me? Totally no idea...Only this test cannot pass...."
                }
            ]
        },
        {
            "question": "I got stuck on Suite 2, Case 1 with error ID #1293133468. It's incorrect on Turn 0. The test case expects my program to start with player 1, but the default start player is 0. However, if I change that, other test cases don't pass. What do I do?",
            "follow-ups": [
                {
                    "feedback": "can you post a picture of the failed test?"
                },
                {
                    "feedback": "Incorrect implementation of game at turn 0. Please read over the trace to find your error. If you're having trouble, try looking up the error ID on Piazza, or making a post with this full trace output. (error_id: 1293133468) # Error: expected # but got # Incorrect result after playing 1 game(s): # ---------------------------------------------------------------- # score0 score1 Turn Summary # ---------------------------------------------------------------- # Turn 0: 0 0 Player 1 rolls 9 six-sided dice: # +10 # 10 0 # ---------------------------------------------------------------- # Turn 1: 10 0 Player 0 rolls 3 six-sided dice: # -10 +10 # 0 10 # ---------------------------------------------------------------- # Turn 2: 0 10 Player 1 rolls 4 six-sided dice: # +16 # 0 26 # ---------------------------------------------------------------- # Turn 3: 0 26 Player 0 rolls 2 six-sided dice: # +7 # 7 26 # ---------------------------------------------------------------- # Turn 4: 7 26 Player 1 rolls 8 six-sided dice: # +1 # 7 27 # ---------------------------------------------------------------- # Turn 5: 7 27 Player 0 rolls 3 six-sided dice: # +1 # 8 27 # ---------------------------------------------------------------- # Turn 6: 8 27 Player 1 rolls 5 six-sided dice: # +23 # 8 50 # ---------------------------------------------------------------- # Turn 7: 8 50 Player 0 rolls 7 six-sided dice: # +1 # 9 50 # ---------------------------------------------------------------- # Turn 8: 9 50 Player 1 rolls 4 six-sided dice: # +13 # 9 63 # ---------------------------------------------------------------- # Turn 9: 9 63 Player 0 rolls 3 six-sided dice: # +15 # 24 63 # ---------------------------------------------------------------- # Turn 10: 24 63 Player 1 rolls 4 six-sided dice: # +15 # 24 78 # ---------------------------------------------------------------- # Turn 11: 24 78 Player 0 rolls 2 six-sided dice: # +1 # 25 78 # ---------------------------------------------------------------- # Turn 12: 25 78 Player 1 rolls 6 six-sided dice: # +1 # 25 79 # ---------------------------------------------------------------- # Turn 13: 25 79 Player 0 rolls 4 six-sided dice: # +1 # 26 79 # ---------------------------------------------------------------- # Turn 14: 26 79 Player 1 rolls 6 six-sided dice: # +1 # 26 80 # ---------------------------------------------------------------- # Turn 15: 26 80 Player 0 rolls 10 six-sided dice: # +54 -50 # 80 30 # ---------------------------------------------------------------- # Turn 16: 80 30 Player 1 rolls 0 dice: # -40 +50 # 40 80 # ---------------------------------------------------------------- # Turn 17: 40 80 Player 0 rolls 4 six-sided dice: # +1 # 41 80 # ---------------------------------------------------------------- # Turn 18: 41 80 Player 1 rolls 8 six-sided dice: # +73 -39 # 114 41 # ---------------------------------------------------------------- # Final Score: 114 41 # ----------------------------------------------------------------"
                },
                {
                    "feedback": "Never mind -- I've solved the issue"
                }
            ]
        },
        {
            "question": "For the 1st turn for player 0, the score returns 0 instead of 9. I checked my code, but can't figure out why it didn't return the right value. I know the score is player 0's score and other being player 1's score from the lambda function. Any ideas on how to fix this?",
            "follow-ups": [
                {
                    "feedback": "Which test case are you referring to? I need some more context to help you out."
                },
                {
                    "feedback": "The first test case:  Question 5b > Suite 1 > Case 1  >>> import hog  >>> always_one = hog.make_test_dice(1)  >>> always_two = hog.make_test_dice(2)  >>> always_three = hog.make_test_dice(3)  >>> always = hog.always_roll  >>> # example 1  >>> s0, s1 = hog.play(lambda score, other: (score + 3) // 4 * 2 + 3, lambda score, other: 4 - other // 4 * 2, score0=0, score1=0, goal=10, dice=always_one)  >>> s0  0  # Error: expected  # 9  # but got  # 0"
                },
                {
                    "feedback": "I was in the same situation. Have you found the problem?"
                },
                {
                    "feedback": "Still working on it, but I noticed that my feral hogs's function parameters don't include the number of rolls from the last turn. Instead, it's the same as the current turn. So there won't be 3 bonus points until there is a 2 turn difference, but it's 0, which is false.  I don't know how to let my code save the number of rolls from the previous turn. Do I need another variable, then include it in the feral hog's parameter?"
                },
                {
                    "feedback": "yeah I set 3 parameters in my feral hog’s function: number of tolls for this turn, number of rolls of last turn and score. And set the initial value of the number of rolls of last turn to 0, then let the number of rolls of last turn equal the number of rolls this turn at the end of feral hog’s def statement."
                },
                {
                    "feedback": "The only thing so far is to find out why s0 has 0 points instead of 9 according to the first test case from above. Anybody solve this same issue yet or has an approach to fix it? I am not understanding why after checking any mistakes and found none."
                },
                {
                    "feedback": "it seems like you are not adding anything to the score at all, including the normal points earned from the roll. are the normal take_turn scores still being added to score0 or score1?"
                },
                {
                    "feedback": "The take_turn is returning the scores correctly, but I think my feral hogs is not adding any score. I got the same result when not applying feral hogs. So every turn was all Pig Out, so s0 has 10 points instead of 9 whether I apply feral hogs or not."
                },
                {
                    "feedback": "When I do not include the swap function, s0 has 10 points. If the swap function is applied, s0 has 0 points.  I used different bonus points like 15 from the feral hogs to see any different result but seems to be the same without or with swap, respectively. My swap function is in the while loop and my def feral hogs is before the loop, where feral hog returns the player's current score with 3 bonus points.  I am confused on how to fix the error from the first test case since s0 does not have a score of 9."
                },
                {
                    "feedback": "Fixed the error, I forgot about changing player numbers"
                }
            ]
        },
        {
            "question": "I'm not sure how the turn summary actually works. When I tried to debug the output for each turn, it seemed that my debug output did not match the turn summary given the ok.py  This is an extract from my output. The numbers in the brackets are [score0, difference from last score0, score1, difference from last score1 ]                #     Player 0 rolls 0 dice [ 0 0 10 10 ]       #     Player 1 rolls 9 dice [ 0 0 47 37 ]       #     Player 0 rolls 2 dice [ 4 4 47 0 ]       #     Player 1 rolls 7 dice [ 4 0 51 4 ]       #     Player 0 rolls 9 dice [ 5 1 51 0 ]       #     Player 1 rolls 10 dice [ 5 0 52 1 ]  However the turn summary shows:                #     ----------------------------------------------------------------     #                 score0  score1    Turn Summary     #     ----------------------------------------------------------------     #     Turn 0:          0       0    Player 0 rolls 0 dice:     #                     +4      +4             #                      4       4         #     ----------------------------------------------------------------     #     Turn 1:          4       4    Player 1 rolls 7 six-sided dice:     #                            +47             #                      4      51         #     ----------------------------------------------------------------     #     Turn 2:          4      51    Player 0 rolls 9 six-sided dice:     #                     +1     -46             #                      5       5         #     ----------------------------------------------------------------     #     Turn 3:          5       5    Player 1 rolls 10 six-sided dice:     #                            +47             #                      5      52         #     ----------------------------------------------------------------     #     Turn 4:          5      52    Player 0 rolls 9 six-sided dice:     #                     +1     -46             #                      6       6         #     ----------------------------------------------------------------     #     Turn 5:          6       6    Player 1 rolls 3 six-sided dice:     #                            +47             #                      6      53         #     ----------------------------------------------------------------     #     Turn 6:          6      53    Player 0 rolls 9 six-sided dice:     #                     +1     -46             #                      7       7      Even the dice numbers are different. Am I doing anything wrong?",
            "follow-ups": [
                {
                    "feedback": "I am not sure how you are producing the numbers in your first code block, but it doesn't seem to match with what is actually happening in your score variables."
                }
            ]
        },
        {
            "question": "Can someone find out what's wrong with abs( ) function? ![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzw72uq5yl3y1%2Fk09v0l7tjjvf%2FScreen_Shot_20190907_at_11.04.05_AM.png)",
            "follow-ups": [
                {
                    "feedback": "The subtraction operator will not work if one of the operators is an integer and the other is a function. In your case, I suspect that your strategy1 function is returning an integer, but the variable turn1 is linked to a function."
                },
                {
                    "feedback": "looks like turn1 is a function instead of integer (from the given error message). please check your codes"
                }
            ]
        },
        {
            "question": "So I've been stuck on this case for quite some time, and I'm really not sure what's wrong:  ![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzlnoq9htib1t0%2Fk09z7zst4de4%2FTest1.PNG)  ![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzlnoq9htib1t0%2Fk09zaomay661%2FProblem.PNG)  and I put in some code to see what is resulting from each roll, and it does come out to what I have calculated on paper, the result is expecting 9 on score0, but the problem is, score1 becomes greater than 10 faster than s0, if you go about the function by hand, s0 gets to a point where it results in a score of 2, then 0, which activates feral hogs and then free bacon which boosts up the score by a lot. What is wrong here?",
            "follow-ups": [
                {
                    "feedback": "On the first turn, player 0 rolls 3 dice. On the second turn, player 1 rolls 4 dice. On the third turn, player 0 rolls 5 dice.... Make sure you keep track of the correct number of dice each player rolls on their turns. If you do this, you'll keep track of when a bonus of 3 is warranted. In this test case, feral_hogs happens to be invoked on almost every turn. Your calculation of roll1 does not seem to be right, and you only seem to invoke feral hogs once."
                }
            ]
        },
        {
            "question": "When coding feral_hogs, I implemented take_turn(strategy0(opponent_score), score1, dice) after setting opponent_score = 1. however, only 3 cases pass and then I am getting an error that says strategy() is missing one required positional argument \"opponent_score\". im wondering why this is?",
            "follow-ups": [
                {
                    "feedback": "The strategy arguments need to take into account both players' scores"
                }
            ]
        },
        {
            "question": "Error_id: 3916842897  The program states that my first turn is wrong, however, my print statement solution and ok tests do not match, I'm really not sure what to do! The left is the ok test, the right is my print statement tests, what's wrong??  ![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzlnoq9htib1t0%2Fk0a2dvakxhwb%2Foktest.PNG)![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzlnoq9htib1t0%2Fk0a2e723uedo%2Fmytest.PNG)",
            "follow-ups": [
                {
                    "feedback": "Have same problem :(  I confirmed that the is_swap function works for (10, 0) and that executes after all the points in a turn are added up (after pig out, free bacon, feral hogs), but for some reason it doesn't swap on turn 0.  Please help!!"
                },
                {
                    "feedback": "I've been having that problem too. I also checked that my is_swap function works for (10,0), but it doesn't seem to work for the fuzz testing. Did you find out how to resolve it?"
                },
                {
                    "feedback": "resolving old Hog follow ups - please post a new public / private post if you still have questions about parts of the project that you were not able to complete!"
                }
            ]
        },
        {
            "question": ">>> import hog   >>> always_three = hog.make_test_dice(3)   >>> always = hog.always_roll   >>> #   >>> # Play function stops at goal   >>> s0, s1 = hog.play(always(5), always(3), score0=91, score1=10, dice=always_three, feral_hogs=False)   >>> s0   ? 106   \\-- OK! --  >>> s1   ? 19   \\-- Not quite. Try again! --",
            "follow-ups": [
                {
                    "feedback": "91 + 5*3 = 91+15=106, I am correct,  10 + 3*3 = 19, why not quite??"
                },
                {
                    "feedback": "since 106 is greater than the default goal score of 100, and player 0's turn comes before player 1's, the game finishes before player 1 has a turn to roll again, so the score stays at 10."
                }
            ]
        },
        {
            "question": "Is there any way to see the detailed execution process of a failed test case in 5b?",
            "follow-ups": [
                {
                    "feedback": "same question...how can I get the error_id?"
                },
                {
                    "feedback": "resolving old Hog follow ups - please post a new public / private post if you still have questions about parts of the project that you were not able to complete!"
                }
            ]
        },
        {
            "question": "That moment when you fix one test case and fail another... I'm failing a case with error id #1864510236. # Incorrect result after playing 1 game(s): # ---------------------------------------------------------------- # score0 score1 Turn Summary # ---------------------------------------------------------------- # Turn 0: 0 0 Player 0 rolls 0 dice: # +10 # 0 10 # ---------------------------------------------------------------- # Turn 1: 0 10 Player 1 rolls 4 six-sided dice: # +16 # 0 26 # ---------------------------------------------------------------- # Turn 2: 0 26 Player 0 rolls 2 six-sided dice: # +7 # 7 26 # ---------------------------------------------------------------- # Turn 3: 7 26 Player 1 rolls 8 six-sided dice: # +1 # 7 27 # ---------------------------------------------------------------- # Turn 4: 7 27 Player 0 rolls 3 six-sided dice: # +1 # 8 27 # ---------------------------------------------------------------- # Turn 5: 8 27 Player 1 rolls 5 six-sided dice: # +26 # 8 53 # ---------------------------------------------------------------- # Turn 6: 8 53 Player 0 rolls 3 six-sided dice: # +1 # 9 53 # ---------------------------------------------------------------- # Turn 7: 9 53 Player 1 rolls 4 six-sided dice: # +1 # 9 54 # ---------------------------------------------------------------- # Turn 8: 9 54 Player 0 rolls 3 six-sided dice: # +7 # 16 54 # ---------------------------------------------------------------- # Turn 9: 16 54 Player 1 rolls 8 six-sided dice: # +36 # 16 90 # ---------------------------------------------------------------- # Turn 10: 16 90 Player 0 rolls 6 six-sided dice: # +74 -70 # 90 20 # ---------------------------------------------------------------- # Turn 11: 90 20 Player 1 rolls 0 dice: # -60 +70 # 30 90 # ---------------------------------------------------------------- # Turn 12: 30 90 Player 0 rolls 6 six-sided dice: # +1 # 31 90 # ---------------------------------------------------------------- # Turn 13: 31 90 Player 1 rolls 7 six-sided dice: # +1 # 31 91 # ---------------------------------------------------------------- # Turn 14: 31 91 Player 0 rolls 3 six-sided dice: # +15 # 46 91 # ---------------------------------------------------------------- # Turn 15: 46 91 Player 1 rolls 3 six-sided dice: # +1 # 46 92 # ---------------------------------------------------------------- # Turn 16: 46 92 Player 0 rolls 0 dice: # +11 # 57 92 # ---------------------------------------------------------------- # Turn 17: 57 92 Player 1 rolls 6 six-sided dice: # +1 # 57 93 # ---------------------------------------------------------------- # Turn 18: 57 93 Player 0 rolls 3 six-sided dice: # +17 # 74 93 # ---------------------------------------------------------------- # Turn 19: 74 93 Player 1 rolls 0 dice: # +6 # 74 99 # ---------------------------------------------------------------- # Turn 20: 74 99 Player 0 rolls 5 six-sided dice: # +20 # 94 99 # ---------------------------------------------------------------- # Turn 21: 94 99 Player 1 rolls 7 six-sided dice: # +4 # 94 103 # ---------------------------------------------------------------- # Final Score: 94 103 # ---------------------------------------------------------------- # Incorrect implementation of game at turn 2. Turn 2, however, doesn't really tell me anything about what was actually incorrectly implemented. Any ideas?",
            "follow-ups": [
                {
                    "feedback": "NEVER MIND, fixed!"
                },
                {
                    "feedback": "how did you fix this?"
                },
                {
                    "feedback": "I'm having the same error, how did you fix yours?"
                }
            ]
        },
        {
            "question": "Hey everyone, I'm having a crazy issue with Error ID: 3740715966 . I've been pulling my hair out over it for the past 2 days and have no idea where I went wrong.  Everything in my code looks fine, yet turn 40 has a swap for whatever reason. Is it possible I am being dumb and not thinking of something?  I appreciate any help!  ![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzkuxpojceb5e7%2Fk0amt756340q%2FHog51pt1.JPG)  ![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzkuxpojceb5e7%2Fk0amtphky7m5%2FHog5bpt2.JPG)  ![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzkuxpojceb5e7%2Fk0amu7p6he2s%2FHog5bpt3.JPG)",
            "follow-ups": [
                {
                    "feedback": "I'm just a dummy and wrote the wrong variable in an if-else statement which messed up the whole thing. Issue resolved!"
                }
            ]
        },
        {
            "question": "Can we use math library and functions such as abs or we have to write our own function to do that?",
            "follow-ups": [
                {
                    "feedback": "you are free to use built-in functions like abs."
                }
            ]
        },
        {
            "question": "Question 5b > Suite 1 > Case 1  >>> import hog  >>> always_one = hog.make_test_dice(1)  >>> always_two = hog.make_test_dice(2)  >>> always_three = hog.make_test_dice(3)  >>> always = hog.always_roll  >>> # example 1  >>> s0, s1 = hog.play(lambda score, other: (score + 3) // 4 * 2 + 3, lambda score, other: 4 - other // 4 * 2, score0=0, score1=0, goal=10, dice=always_one)  >>> s0  8  # Error: expected  # 9  # but got  # 8  not entirely sure what is happening.. my is_swap is at the end and my previous value of dice roll is captured. if my roll_dice passed all cases, should i still try to modify pig_out to fix this?",
            "follow-ups": [
                {
                    "feedback": "same problem!"
                },
                {
                    "feedback": "also have this issue! any help would be greatly appreciated! :)"
                },
                {
                    "feedback": "resolving old Hog follow ups - please post a new public / private post if you still have questions about parts of the project that you were not able to complete!"
                }
            ]
        },
        {
            "question": "Whenever I try to run the GUI, my Mac crashes. Is there any way I can fix this? I've downloaded the Tkinter too.",
            "follow-ups": [
                {
                    "feedback": "resolving old Hog follow ups - please post a new public / private post if you still have questions about this or other parts of the project!"
                }
            ]
        },
        {
            "question": "Hi!! when I wrote **roll_dice(strategy0, dice)** , it told me that **num_rolls must be an integer.** The same thing happens when I put take_turn(strategy0, score1, dice) there. Does anyone know what is going wrong here?  Really appreciate your help!!!",
            "follow-ups": [
                {
                    "feedback": "Make sure you take note of what parameters get passed into these functions, and pass the proper things as those parameters"
                },
                {
                    "feedback": "I think the strategy0 here turns out to be num_rolls? why not it cannot be taken as the parameter?"
                },
                {
                    "feedback": "strategy0 here is a function according to the description of a strategy function included in the comment above the play function (I believe it is also in the spec under problem 5a)."
                },
                {
                    "feedback": "Thank you! solved."
                }
            ]
        },
        {
            "question": "Incorrect result after playing 2 game(s):  \\----------------------------------------------------------------  score0 score1 Turn Summary  \\----------------------------------------------------------------  Turn 0: 0 0 Player 0 rolls 7 six-sided dice:  +1  1 0  \\----------------------------------------------------------------  Turn 1: 1 0 Player 1 rolls 3 six-sided dice:  +14  1 14  \\----------------------------------------------------------------  Turn 2: 1 14 Player 0 rolls 7 six-sided dice:  +13 -12  14 2  \\----------------------------------------------------------------  Turn 3: 14 2 Player 1 rolls 4 six-sided dice:  +1  14 3  \\----------------------------------------------------------------  Turn 4: 14 3 Player 0 rolls 1 six-sided die:  +6  20 3  \\----------------------------------------------------------------  Turn 5: 20 3 Player 1 rolls 4 six-sided dice:  +1  20 4  \\----------------------------------------------------------------  Turn 6: 20 4 Player 0 rolls 2 six-sided dice:  +7  27 4  \\----------------------------------------------------------------  Turn 7: 27 4 Player 1 rolls 1 six-sided die:  +1  27 5  \\----------------------------------------------------------------  Turn 8: 27 5 Player 0 rolls 4 six-sided dice:  +20  47 5  \\----------------------------------------------------------------  Turn 9: 47 5 Player 1 rolls 6 six-sided dice:  +24  47 29  \\----------------------------------------------------------------  Turn 10: 47 29 Player 0 rolls 1 six-sided die:  +2  49 29  \\----------------------------------------------------------------  Turn 11: 49 29 Player 1 rolls 0 dice:  +6  49 35  \\----------------------------------------------------------------  Turn 12: 49 35 Player 0 rolls 4 six-sided dice:  +17  66 35  \\----------------------------------------------------------------  Turn 13: 66 35 Player 1 rolls 5 six-sided dice:  +18  66 53  \\----------------------------------------------------------------  Turn 14: 66 53 Player 0 rolls 3 six-sided dice:  +12  78 53  \\----------------------------------------------------------------  Turn 15: 78 53 Player 1 rolls 4 six-sided dice:  +13  78 66  \\----------------------------------------------------------------  Turn 16: 78 66 Player 0 rolls 10 six-sided dice:  +1  79 66  \\----------------------------------------------------------------  Turn 17: 79 66 Player 1 rolls 3 six-sided dice:  +12  79 78  \\----------------------------------------------------------------  Turn 18: 79 78 Player 0 rolls 4 six-sided dice:  +15  94 78  \\----------------------------------------------------------------  Turn 19: 94 78 Player 1 rolls 4 six-sided dice:  +12  94 90  \\----------------------------------------------------------------  Turn 20: 94 90 Player 0 rolls 2 six-sided dice:  +12  106 90  \\----------------------------------------------------------------  Final Score: 106 90  \\----------------------------------------------------------------  Incorrect implementation of game at turn 1.  Please read over the trace to find your error.  If you're having trouble, try looking up the error ID on Piazza,  or making a post with this full trace output.  (error_id: 3079010512)  What is wrong with Turn1 I cant figure it out",
            "follow-ups": [
                {
                    "feedback": "resolving old Hog follow ups - please post a new public / private post if you still have questions about this or other parts of the project!"
                }
            ]
        },
        {
            "question": "![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzqdhyvhgx247w%2Fk0bg7wa6qco7%2FScreen_Shot_20190908_at_1.36.07_PM.png)  Unable to debug..breaks at turn 5",
            "follow-ups": [
                {
                    "feedback": "I am having the same issue."
                },
                {
                    "feedback": "resolving old Hog follow ups - please post a new public / private post if you still have questions about debugging parts of the project!"
                }
            ]
        },
        {
            "question": "There is an error on Turn 3, where both players' points change. This only happens with swine swap, and the number that should be passed through is 4. But 4 is not a possible when rolling 6 dice. So I think there is a problem with my roll_dice() function? I'm not sure here.  ![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzqdja5iimg5ce%2Fk0btpaikrmtb%2FScreenshot_20190908_at_8.04.07_PM.png)",
            "follow-ups": [
                {
                    "feedback": "I just had some misplaced lines"
                }
            ]
        },
        {
            "question": "I passed the first three test cases as well and then I had error id: 2742982547  I outputted the amount of rolls per turn and in turn 2 it says ther were 7 rolls when according to the game log there were 2.  [roll_code.PNG](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzdh1h5ikve30d%2Fk0c1xdenew5c%2Froll_code.PNG)  Here is a screenshot of my terminal![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzdh1h5ikve30d%2Fk0c1t43hl7id%2FCode_Capture.PNG)",
            "follow-ups": [
                {
                    "feedback": "maybe you use some function too many times in a turn  the strategy and outcome the test program used are based on the random number, which is rely on the times you use a function"
                }
            ]
        },
        {
            "question": "score0 score1 Turn Summary  # ----------------------------------------------------------------  # Turn 0: 0 0 Player 0 rolls 7 six-sided dice:  # +1  # 1 0  # ----------------------------------------------------------------  # Turn 1: 1 0 Player 1 rolls 3 six-sided dice:  # +10 +1  # 11 1  # ----------------------------------------------------------------  # Turn 2: 11 1 Player 0 rolls 9 six-sided dice:  # +4  # 15 1  # ----------------------------------------------------------------  # Turn 3: 15 1 Player 1 rolls 3 six-sided dice:  # +13  # 15 14  # ----------------------------------------------------------------  # Turn 4: 15 14 Player 0 rolls 8 six-sided dice:  # +1  # 16 14  # ----------------------------------------------------------------  # Turn 5: 16 14 Player 1 rolls 7 six-sided dice:  # +38  # 16 52  # ----------------------------------------------------------------  # Turn 6: 16 52 Player 0 rolls 7 six-sided dice:  # +23  # 39 52  # ----------------------------------------------------------------  # Turn 7: 39 52 Player 1 rolls 10 six-sided dice:  # +40  # 39 92  # ----------------------------------------------------------------  # Turn 8: 39 92 Player 0 rolls 3 six-sided dice:  # +12  # 51 92  # ----------------------------------------------------------------  # Turn 9:",
            "follow-ups": [
                {
                    "feedback": "Something went wrong at turn 5, any feedback would be helpful!"
                },
                {
                    "feedback": "resolving old Hog follow ups - please post a new public / private post if you still have questions about this or other parts of the project!"
                }
            ]
        },
        {
            "question": "![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzqdisrjcdr4q9%2Fk0cppsmilp4v%2FScreen_Shot_20190909_at_11.00.17_AM.png)  I have a problem. When I run my code, the score for player1 is off by 1 number. I get 19 instead of the intended 18. My code works just fine for Case 2 and Case 3. I manually checked that. It just doesn't work for Case 1. Also, if the goal is 10 and the dice always rolls 1, shouldn't pig out always take place? Why does the expected score for player1 go as high up to 18?",
            "follow-ups": [
                {
                    "feedback": "![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzqdisrjcdr4q9%2Fk0cqnk5jtxn0%2FScreen_Shot_20190909_at_11.26.24_AM.png)  Here's my numbers of rolls and scores for players for each turn"
                }
            ]
        },
        {
            "question": "# Error: expected  # but got  # Incorrect result after playing 1 game(s):  # ----------------------------------------------------------------  # score0 score1 Turn Summary  # ----------------------------------------------------------------  # Turn 0: 0 0 Player 0 rolls 0 dice:  # +13  # 13 0  # ----------------------------------------------------------------  # Turn 1: 13 0 Player 1 rolls 10 six-sided dice:  # +40  # 13 40  # ----------------------------------------------------------------  # Turn 2: 13 40 Player 0 rolls 2 six-sided dice:  # +4  # 17 40  # ----------------------------------------------------------------  # Turn 3: 17 40 Player 1 rolls 0 dice:  # +9  # 17 49  # ----------------------------------------------------------------  # Turn 4: 17 49 Player 0 rolls 1 six-sided die:  # +9  # 26 49  # ----------------------------------------------------------------  # Turn 5: 26 49 Player 1 rolls 5 six-sided dice:  # +1  # 26 50  # ----------------------------------------------------------------  # Turn 6: 26 50 Player 0 rolls 7 six-sided dice:  # +1  # 27 50  # ----------------------------------------------------------------  # Turn 7: 27 50 Player 1 rolls 9 six-sided dice:  # +1  # 27 51  # ----------------------------------------------------------------  # Turn 8: 27 51 Player 0 rolls 3 six-sided dice:  # +14  # 41 51  # ----------------------------------------------------------------  # Turn 9: 41 51 Player 1 rolls 10 six-sided dice:  # +4  # 41 55  # ----------------------------------------------------------------  # Turn 10: 41 55 Player 0 rolls 5 six-sided dice:  # +4  # 45 55  # ----------------------------------------------------------------  # Turn 11: 45 55 Player 1 rolls 7 six-sided dice:  # +1  # 45 56  # ----------------------------------------------------------------  # Turn 12: 45 56 Player 0 rolls 9 six-sided dice:  # +1  # 46 56  # ----------------------------------------------------------------  # Turn 13: 46 56 Player 1 rolls 9 six-sided dice:  # +4  # 46 60  # ----------------------------------------------------------------  # Turn 14: 46 60 Player 0 rolls 8 six-sided dice:  # +14 -10  # 60 50  # ----------------------------------------------------------------  # Turn 15: 60 50 Player 1 rolls 3 six-sided dice:  # +16  # 60 66  # ----------------------------------------------------------------  # Turn 16: 60 66 Player 0 rolls 0 dice:  # +4  # 64 66  # ----------------------------------------------------------------  # Turn 17: 64 66 Player 1 rolls 9 six-sided dice:  # +1  # 64 67  # ----------------------------------------------------------------  # Turn 18:&nbs",
            "follow-ups": [
                {
                    "feedback": "resolving old Hog follow ups - please post a new public / private post if you still have questions. for future reference, you will need to post more information what you tried when debugging, and other information about the error you are experiencing for us to be able to help, instead of a copy and paste of the error."
                }
            ]
        },
        {
            "question": "Question 5b > Suite 1 > Case 3  (cases remaining: 2)  Question 5b > Suite 1 > Case 3  >>> import hog  >>> always_one = hog.make_test_dice(1)  >>> always_two = hog.make_test_dice(2)  >>> always_three = hog.make_test_dice(3)  >>> always = hog.always_roll  >>> # swap after feral hogs  >>> s0, s1 = hog.play(always(2), always(1), score0=45, score1=5, goal=50, dice=hog.make_test_dice(5, 2))  >>> s0  I was a bit confused about this case. Can somebody please explain?  Thank you so much",
            "follow-ups": [
                {
                    "feedback": "the play function will play until the very end of the game, so you have to list what the final score of player0 is.  note the addition of the feral hog rule, where you add 3 if the difference between the number of dice rolled on the current turn is 2 away from the number of dice rolled on the previous turn."
                }
            ]
        },
        {
            "question": ">>> s0, s1 = hog.play(lambda score, other: (score + 3) // 4 * 2 + 3, lambda score, other: 4 - other // 4 * 2, score0=0, score1=0, goal=10, dice=always_one)  Can someone please explain to me how to get s0 and s1? I'm so confused.",
            "follow-ups": [
                {
                    "feedback": "for each of the turns, you should make the follow order of checks for the player who's turn it is:  check if someone has won, and if so do not take any more turns!  figure out the number of rolls from the strategy, make sure to pass in the current player's score as score, and the _other_ player's score as other. note that this changes depending on whose turn it is!  calculate the score for that number of rolls with the given dice. remember pig out!  check if feral hogs comes into play, and if so, also add the 3 point bonus from that.  finally, check if there is a swine swap with the score added to the roll score and the potential feral hog bonus.  swap players and repeat!"
                }
            ]
        },
        {
            "question": "[Screen_Shot_20190909_at_2.26.12_PM.png](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzqdhl9cy4r411%2Fk0cx2k0z1ti%2FScreen_Shot_20190909_at_2.26.12_PM.png)  Can someone explain how to get s1?  I get how to solve s0 but cant get s1",
            "follow-ups": [
                {
                    "feedback": "Can you explain how you solve for s0 for that case?"
                },
                {
                    "feedback": "the first player will roll two dice - what should their score be from that?  but also, the feral hog bonus may activate - the first player will roll 2 dice, and by default, if it is the first turn, the previous turn roll will be 0.  but then you should check to see if there is a swine swap!"
                }
            ]
        },
        {
            "question": "Do you put the code for feral hogs inside your 5a code or do you input it separately?",
            "follow-ups": [
                {
                    "feedback": "in 5a code"
                }
            ]
        },
        {
            "question": "How do we refer to the previous dice rolled?",
            "follow-ups": [
                {
                    "feedback": "Just like the fibonacci function from lecture example, you can create a variable to hold previous dice rolls."
                }
            ]
        },
        {
            "question": "Im getting this error id (1938647392) and i have no clue what is wrong ?  [hog_5b_error.png](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjr5jryyhii14l1%2Fk0cz5o4cnwef%2Fhog_5b_error.png)",
            "follow-ups": [
                {
                    "feedback": "resolving old Hog follow ups - please post a new public / private post if you still have questions about this or other parts of the project!"
                }
            ]
        },
        {
            "question": "any help with implementing feral hogs??? I'm really stuck please help",
            "follow-ups": [
                {
                    "feedback": "+1"
                },
                {
                    "feedback": "Think of what info you need! And if there's any info that you don't have it handy, maybe you want to save that info by defining a variable. Also note, that you are simulating the entire game (meaning that you have access to \"previous rolls\" if you want it to)."
                }
            ]
        },
        {
            "question": "Anyone knows how to figure this out?  Incorrect result after playing 1 game(s):   \\----------------------------------------------------------------   score0 score1 Turn Summary   \\----------------------------------------------------------------   Turn 0: 0 0 Player 0 rolls 0 dice:   +10   0 10   \\----------------------------------------------------------------   Turn 1: 0 10 Player 1 rolls 4 six-sided dice:   +19   0 29   \\----------------------------------------------------------------   Turn 2: 0 29 Player 0 rolls 10 six-sided dice:   +4   4 29   \\----------------------------------------------------------------   Turn 3: 4 29 Player 1 rolls 5 six-sided dice:   +1   4 30   \\----------------------------------------------------------------   Turn 4: 4 30 Player 0 rolls 8 six-sided dice:   +1   5 30  Incorrect implementation of game at turn 1.   Please read over the trace to find your error.  (error_id: 2988105308)",
            "follow-ups": [
                {
                    "feedback": "resolving old Hog follow ups - please post a new public / private post if you still have questions about this or other parts of the project!"
                }
            ]
        },
        {
            "question": "![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzqdhoa4tu742i%2Fk0d3u2uv78w2%2F20190909_2.png)",
            "follow-ups": [
                {
                    "feedback": "I'm getting error number 2800941855, it says there's somthing wrong with turn 5, but I can't figure out why, can sombody help me?  Thanks."
                },
                {
                    "feedback": "I am having the same issue. Did you ever figure out the problem?"
                },
                {
                    "feedback": "resolving old Hog follow ups - please post a new public / private post if you still have questions about this or other parts of the project!"
                }
            ]
        },
        {
            "question": "should feral hogs be checked before or after is_swap?",
            "follow-ups": [
                {
                    "feedback": "It should be done before swap, because I think swap is done after points are added.  \"Swine Swap. After points for the turn are added to the current player's score, ...\""
                },
                {
                    "feedback": "before"
                }
            ]
        },
        {
            "question": "![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzqdiudyo0z4r3%2Fk0dbl4oqneqn%2Fcode2.png)![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fjzqdiudyo0z4r3%2Fk0dblbkg3y2e%2Fcode3.png)DDoes anyone knows why my code works for Problem 5a but not for 5b?",
            "follow-ups": [
                {
                    "feedback": "deleted your code screenshot - please don't post your code onto piazza.  and this is because you need to implement feral hogs."
                },
                {
                    "feedback": "Thanks for helping delete my code, I was looking to edit it out after posting it, but couldn't find a way to do so.      I am still having the same problem even after implementing feral hogs - problem 5b is basically ignoring my feral hogs code and just checking as if the feral hogs code wasn't there."
                },
                {
                    "feedback": "resolving old Hog follow ups - please post a new public / private post if you still have questions about this or other parts of the project!"
                }
            ]
        },
        {
            "question": "I'm stuck on 5b. Could we define feral hogs like we defined is_swap, then implement it into our code for #5?",
            "follow-ups": [
                {
                    "feedback": "feral_hogs is a boolean argument that is passed into the play function (see the header)."
                },
                {
                    "feedback": "I think so but I am confused about what the parameters of it should be"
                },
                {
                    "feedback": "it is a boolean, not a function that needs to be defined, or take in any arguments."
                }
            ]
        },
        {
            "question": "Solved!"
        },
        {
            "question": "(error_id: 1914128961)  Incorrect implementation of game at turn 21.  # Please read over the trace to find your error.  # but got  # Incorrect result after playing 40 game(s):  # ----------------------------------------------------------------  # score0 score1 Turn Summary  # ----------------------------------------------------------------  # Turn 0: 0 0 Player 0 rolls 8 six-sided dice:  # +34  # 34 0  # ----------------------------------------------------------------  # Turn 1: 34 0 Player 1 rolls 1 six-sided die:  # +1  # 34 1  # ----------------------------------------------------------------  # Turn 2: 34 1 Player 0 rolls 3 six-sided dice:  # +7  # 41 1  # ----------------------------------------------------------------  # Turn 3: 41 1 Player 1 rolls 10 six-sided dice:  # -39 +40  # 2 41  # ----------------------------------------------------------------  # Turn 4: 2 41 Player 0 rolls 0 dice:  # +9  # 11 41  # ----------------------------------------------------------------  # Turn 5: 11 41 Player 1 rolls 6 six-sided dice:  # +26  # 11 67  # ----------------------------------------------------------------  # Turn 6: 11 67 Player 0 rolls 10 six-sided dice:  # +38  # 49 67  # ----------------------------------------------------------------  # Turn 7: 49 67 Player 1 rolls 9 six-sided dice:  # +1  # 49 68  # ----------------------------------------------------------------  # Turn 8: 49 68 Player 0 rolls 6 six-sided dice:  # +1  # 50 68  # ----------------------------------------------------------------  # Turn 9: 50 68 Player 1 rolls 8 six-sided dice:  # +1  # 50 69  # ----------------------------------------------------------------  # Turn 10: 50 69 Player 0 rolls 2 six-sided dice:  # +1  # 51 69  # ----------------------------------------------------------------  # Turn 11: 51 69 Player 1 rolls 5 six-sided dice:  # +1  # 51 70  # ----------------------------------------------------------------  # Turn 12: 51 70 Player 0 rolls 10 six-sided dice:  # +1  # 52 70  # ----------------------------------------------------------------  # Turn 13: 52 70 Player 1 rolls 1 six-sided die:  # +6  # 52 76  # ----------------------------------------------------------------  # Turn 14: 52 76 Player 0 rolls 2 six-sided dice:  # +1  # 53 76  # ----------------------------------------------------------------  # Turn 15: 53 76 Player 1 rolls 9 six-sided dice:  # +1  # 53 77  # ----------------------------------------------------------------  # Turn 16: 53 77 Player 0 rolls 1 six-sided die:  # +2  # 55 77  # ----------------------------------------------------------------  # Turn 17: 55 77 Player 1 rolls 10 six-sided dice:  # &nbs",
            "follow-ups": [
                {
                    "feedback": "Turn 17: 55 77 Player 1 rolls 10 six-sided dice:  # +1  # 55 78  # ----------------------------------------------------------------  # Turn 18: 55 78 Player 0 rolls 0 dice:  # +3  # 58 78  # ----------------------------------------------------------------  # Turn 19: 58 78 Player 1 rolls 1 six-sided die:  # +3  # 58 81  # ----------------------------------------------------------------  # Turn 20: 58 81 Player 0 rolls 4 six-sided dice:  # +14  # 72 81  # ----------------------------------------------------------------  # Turn 21: 72 81 Player 1 rolls 7 six-sided dice:  # +42 -9  # 114 72  # ----------------------------------------------------------------  # Final Score: 114 72  # ----------------------------------------------------------------  # Incorrect implementation of game at turn 21.  # Please read over the trace to find your error."
                },
                {
                    "feedback": "resolving old Hog follow ups - please post a new public / private post if you still have questions about this or other parts of the project!  for future reference, please post more information about what you tried to do while debugging, a brief description of what your code does, or other helpful information. it is very difficult for us to help with just a copy paste of your error."
                }
            ]
        },
        {
            "question": "Hi, I am very confused on where to start for this problem. I know that I need a variable within a while loop in order to save the previous roll then check the difference between the new roll and the previous roll but I don't know where I should define feral_hogs within the play function or somehow implement feral_hogs without writing a def statement so as to keep it within the play function? Also, I am confused as to what arguments feral_hogs is supposed to take in, if any.",
            "follow-ups": [
                {
                    "feedback": "I'd like if somebody could answer this question, as I too am experiencing something similar."
                },
                {
                    "feedback": "resolving old Hog follow ups - please post a new public / private post if you still have questions about this problem!"
                }
            ]
        },
        {
            "question": "I got stuck at unlocking this case...  s0, s1 = hog.play(always(2), always(1), score0=0, score1=0, goal=5, dice=hog.make_test_dice(2, 2))  I think it means s0 always rolls 2 times (get 2 and 2 so 4 in total), and s1 always rolls 1 time (get 2)  so after the first turn s0=0+4=4, s1=0+2=2, after the second turn s0=4+4=8, s1=2+2=4  no feral hog or free bacon or swap...  what's wrong here?",
            "follow-ups": [
                {
                    "feedback": "what's the goal score?"
                }
            ]
        },
        {
            "question": "Hi there,  I've been trying to implement my new feral hog rule, but I keep failing, and return :  >>> always_three = hog.make_test_dice(3)  >>> always = hog.always_roll  >>> # example 2  >>> s0, s1 = hog.play(always(2), always(1), score0=0, score1=0, goal=5, dice=hog.make_test_dice(2, 2))  >>> s0  8  I've noted feral_hogs increases the score by 3, and if you have a score which differs by two (in both positive and negative directions), feral_hogs will be activated (i.e. return feral_hogs). Any ideas on what's occurring here?",
            "follow-ups": [
                {
                    "feedback": "in this specific case, the first player rolls two dice, scoring 4, plus a 3 point bonus, since the number of dice they rolled (2) is more than they previously rolled (0)."
                }
            ]
        },
        {
            "question": "![](/redirect/s3?bucket=uploads&prefix=attach%2Fjziyku5gomy7aq%2Fk08zzitk4ju3pb%2Fk3yoasksxt6k%2F%EC%BA%A1%EC%B2%98.JPG)  HI, I'm doing hog because I missed.. but I'm stuck in 5b  dice outcome is 5 1 1 2 6 1 1 1 5 so it contains 1  I think because pigout occurs the score0 should be 47+1 == 48  why is it 54?",
            "follow-ups": [
                {
                    "feedback": "Your program seems to be ignoring how many dice the player is trying to roll, since Ok expected “Player 0 rolls 0 dice,” while your program actually made it roll 9 dice. You should be receiving an argument that tells how many dice are to be rolled."
                },
                {
                    "feedback": "on problem 5a all of the cases are passed.  I did received how many dice are to be rolled by using num_rolls0 = strategy0(score0, score1) and num_rolls1=strategy1(score1, score0)  is it wrong?"
                },
                {
                    "feedback": "Since this is the fuzz test, the problem isn’t necessarily specifically the part of the code that calculates the number of rolls. This is the fuzz test, as described in the output, so there is a multitude of reasons this could be happening, and I wouldn’t be able to identify what it is for you. I would suggest carefully tracing your code (maybe with an environment diagram) and seeing where the program’s action differs from the specification. If you’re still stuck, I would recommend making a private post on Piazza to the instructors."
                }
            ]
        }
    ]
}