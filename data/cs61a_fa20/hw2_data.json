{
    "hw2_data" : [
        {
            "question-number": "HW02 Q1: Num Eights", 
            "threads": [
                {
                    "question": "When I'm trying to come up with base cases, I'm not sure how to not cause the function to return too soon. The only base cases I could come up with caused the function to stop once it saw an 8. I would really appreciate a hint or any help.", 
                    "answer": "With a base case, you want to think of the most simple result that could happen. Following the function's purpose, you want to know how many eights appear in a given number x. So when you are looking at a particular digit, what could that digit be? Either an eight or not an eight. Hope this helps a bit. (It could also help in general to think about how you would solve this question iteratively with a while loop for instance. I know previously we learned about going through each digit of a number with floor division and modulo.)"
                }, 
                {
                    "question": "Are we allowed to have recursive calls in an elif statement? I did that and passed the cases. Will I still get full credit? ", 
                    "answer": "Yes, you are allowed to have recursive calls in the elif statement."
                }, 
                {
                    "question": "It seems like my doctest works for the one's above, but not  86380. Any ideas why? I'm thinking because 0 is the last digit, but I'm not sure why would that matters?", 
                    "answer": "Make sure that your base cases and recursive calls cover all possible cases. I can't tell what's causing the error without looking at your code, but it is likely due to mishandling 0's. "
                }
            ]
        }, 
        {
            "question-number": "HW02 Q2: Ping-pong", 
            "threads": [
                {
                    "question": "If the helper function inside pingpong is the one called recursively, does this still adhere to the rules of the problem?", 
                    "answer": "Yeah that's fine. Just make sure the helper also doesn't contain any assignment statements"
                }, 
                {
                    "question": "May I use a previous function/problem within my solution to this problem?", 
                    "answer": "ye the instrictions say you can"
                }, 
                {
                    "question": "Are if/elif/else, return, and comparison statements allowed?", 
                    "answer": "Yes to all of these. Only assignment statements are disallowed (this is done by the autograder so you'll know if you violate this condition)"
                }, 
                {
                    "question": "What should we do if we have a code that we think works and is working on the doctests but timesout at pingpong(68)?", 
                    "answer": "Ideally, your recursive function or helper should only call helper(n-1), and only call it once. If you have code like this: def helper(n): return helper(n-1) + helper(n-2) or def helper(n): return helper(n-1) + helper(n-1) Your runtime will be exponential, and will time out."
                }, 
                {
                    "question": "In the hint video, the helper function takes three arguments (index, ppn, dir) I get that the last two are supposed to be trackers, but how does this work when we're returning a call to helper? If I don't know ppn or dir, how can I figure out what to pass into those arguments?", 
                    "answer": "So I think what they were going for was that helper would be a drop-in replacement for the while loop. The idea is that you call helper(1,1,1), which would call the next helper, which would call the next helper, and when helper(n, ...) gets called, it returns the correct answer (which gets returned all the way down the stack). While this does work, I do feel that it's a little bit of a contrived solution, because a while or for loop would just be straight-up better. I have an alternate solution to suggest: You could write a helper function called direction(n), which recursively finds the direction pingpong should be going in. Then, have pingpong use pingpong(n-1) and direction(n) to find the current element."
                }, 
                {
                    "question": "Im confused. When I do the problem by hand pingpong(8) should give me 0, and my code doest this too. Im not sure where I went wrong with the hand written part. I think Im getting the code wrong because of my understanding of the problem? From what I can see we start at index 1 and count up and every time the index contains an 8 or is divisible by 8, then we need to change the direction from up to down or vice versa. And we should return the nth number at which the direction shifts correct?", 
                    "answer": "The pingpong function is supposed to return the nth element of the sequence (not the nth number at which the direction shifts). pingpong(8) asks for the 8th element; it should return 8 because we counted upward from the 1st element, which is 1. If we continue the sequence, we then switch directions after the 8th element and start counting downwards, so pingpong(9) should return 7."
                }, 
                {
                    "question": "Can I use a string container in one of the \"if/elif/else\" conditions? I didn't use any other assignment statement. ", 
                    "answer": "if you passed all the tests you should be fine. "
                }, 
                {
                    "question": "Are we allowed to use this type of sequence now that we've learned it: 8 in str(12345678)", 
                    "answer": "the intent is for you to try and do this problem without using string conversion--I'd recommend trying to figure it out this way because it's likely that similar restrictions will be in place on exams. however, if you pass the okpy tests using string conversion you'll get full points."
                }, 
                {
                    "question": "I'm having some trouble with understanding how to approach the base cases of the helper function. Does anyone have any insight that could lead me in the right direction? Thank you!", 
                    "answer": "if you are having trouble with the base case, it may help to take a look at what you are initially calling as arguments into your initial call of your helper function. If you are calling the appropriate initial argument values, the base case should be pretty clear"
                }, 
                {
                    "question": "Is it possible to solve this problem without a helper function?", 
                    "answer": "It is possible, but you'll probably have to add \"extra\" base cases to keep it from timing out. In my opinion, it's also much harder."
                }
            ]
        }, 
        {
            "question-number": "HW02 Q3: Missing Digits", 
            "threads": [
                {
                    "question": "Is it still recursion if the function you are calling recursively is the inner function of a higher-order function?", 
                    "answer": "recursion can be any function being called over and over again within that same one function. so an inner function can be recursively called, when that inner function is calling itself; remember that this function call has to be in the inner function, not the parent function to be considered as recursion."
                }, 
                {
                    "question": "May we write an inner helper function (similar to what the hints video for Q2 ping-pong had suggested) that recursively calls itself? Does that violate any rules for the question?", 
                    "answer": "Yeah it's fine, inner helper functions aren't explicitly outlawed :)"
                },
                {
                    "question": "I am wondering if n<10 can be a good choice of the base case. ", 
                    "answer": "Yes."
                }, 
                {
                    "question": "def ^ SyntaxError: invalid syntax I am having trouble how to fix this error. I am trying to run the missing digit function, but this error is not allowing the function to run. I am not sure where I need to fix the syntax. I tried indenting and backspacing this function, but nothing is working.", 
                    "answer": "Check your parenthesis and brackets in other functions, you might have missed a closing brace somewhere."
                }
            ]
        }, 
        {
            "question-number": "HW02 Q4: Count Coins", 
            "threads": [
                {
                    "question": "can I change the next_largest_coin function to a next_smallest_coin to fit my code?", 
                    "answer": "I could make next_smallest_coin work easily but am curious if there are any tips to making it work using next_largest_coin. I feel like the point is to figure out the reverse of the count_partitions solution."
                }, 
                {
                    "question": "I can figure out how to get the correct answer with a function I defined, called next_smallest_coin, but can't figure it out with the given next_largest_coin function. Can someone help point me in the right direction?", 
                    "answer": "I think a common pattern is this with and without idea for tree recursion. So for the example of making change for 15 15 1-cent coins * 10 1-cent, 1 5-cent coins * 5 1-cent, 2 5-cent coins * 5 1-cent, 1 10-cent coins * 3 5-cent coins + 1 5-cent, 1 10-cent coin + we can split up into two cases, one that is with 1 coin, and the other that is without the 1 coin, as shown by the * and + this matches the logic from http://composingprograms.com/pages/17-recursive-functions.html#example-partitions : The number of ways to partition n using integers up to m equals the number of ways to partition n-m using integers up to m, and the number of ways to partition n using integers up to m-1. The number of ways to make change is with this smallest coin and only using everything but the smallest coin"
                }, 
                {
                    "question": "I used \"coin is None\" as a condition in my if statement. Is \"is\" operator considered out of scope or I can use it?", 
                    "answer": "You can use it!"
                }, 
                {
                    "question": "Did anyone else have the same test case failed? Any hints would be appreciated. >>> count_couns(100) 121 # Error: expected # 242 # but got # 121", 
                    "answer": "Make sure you are actually using the 25 cent coin! I had the same error and what Alex said solved my issue, I didn't actually use the 25 cent coin, but rather due to one of the base case conditions it would terminate to 0 when the next coin was 25 if that helps OP (though it's probably resolved by now)"
                }, 
                {
                    "question": "Is it ok if my solution doesn't use recursion?", 
                    "answer": "You have to use recursion!"
                }, 
                {
                    "question": "Are we allowed to add parameters to the function? Currently my response is just a helper function that does basically everything, because I needed two parameters as opposed to one to solve it. But I feel like it would be cleaner if I could just add a second parameter to the original function, and have a default value for the second parameter so it would still work when called with one argument. I have a similar situation with I think either problem 2 or 3. Any advice?", 
                    "answer": "you arent allowed to change the parameters to the original function. you might want to look into using an inner helper function."
                }, 
                {
                    "question": "When I run the code on numbers 10, and 15, I get the correct output, but when I go up to 20 and 100 it fails, but still gives me a number just the wrong one. On 20 im getting 10 instead of 9, and on 100 im getting 262 instead of 242. Not sure what im doing wrong. ", 
                    "answer": "when you go \"up\" a coin level, makes sure you don't subtract the current coin. I.E. call f(n, next_largest_coin(c)) instead of f(n-c, next_largest_coin(c))  If 10, 15, and 20 work but count_coins(25) doesn't work (should = 13), then not including 25cents is probably the issue. Turns out that I wasn't including 25cents due to returning 0 instead of a call function. "
                }, {
                    "question": "Can we write a separate helper function outside of the count_coins function, or does our helper function have to fall within the count_coins function? Also, if we change next_largest_coin to be next_smallest_coin is that okay? ", 
                    "answer": "Changing next_largest_coin to next_smallest_coin is completely fine. I'm not sure about writing the helper function outside; normally it should be ok, but the doctests for count_coins also check the source code of count_coins to make sure there are no while or for loops. I would put it inside, just to be safe."
                }, 
                {
                    "question": "I somehow figured it out and successfully submitted it (4 test cases passed, no cases failed), but when I copy and pasted my code into python tutor to try and find out how I did it, python tutor says that there is a trace size error. Should I be worried?", 
                    "answer": "If it says something like “stopped since this run produced more than 2mb of data” then that’s perfectly fine. It just means that there are so many recursive calls that python tutor can’t display everything. If it works when you run it normally then you’re fine."
                }, 
                {
                    "question": "I've been working on this particular problem for a while now, but I feel like I haven't been making any progress for the past few hours. I'm not sure what the recursive cases should be (specifically the partitioning total) and I'm also feeling lost on what I should pass as n and m in my initial call to the helper function. I'd greatly appreciate it if somebody could point me in the right direction. ", 
                    "answer": ""
                }, 
                {
                    "question": "", 
                    "answer": ""
                }, 
                {
                    "question": "", 
                    "answer": ""
                }, 
                {
                    "question": "", 
                    "answer": ""
                }, 
                {
                    "question": "", 
                    "answer": ""
                }, 
                {
                    "question": "", 
                    "answer": ""
                }
            ]
        }, 
        {
            "question-number": "HW02 Q5: Anonymous Factorial", 
            "threads": [
                {
                    "question": "", 
                    "answer": ""
                }
            ]
        }
    ]
}